/*
 * SIP Communicator, the OpenSource Java VoIP and Instant Messaging client.
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */
package net.java.sip.communicator.impl.protocol.jabber.extensions.jingle;

import net.java.sip.communicator.util.*;

import org.jivesoftware.smack.packet.*;

/**
 * The Jingle "content" element contains the entire description of the session
 * being initiated. Among other things it contains details such as transport,
 * or (in the case of RTP) payload type list.
 *
 * @author Emil Ivov
 */
public class JingleContent implements PacketExtension
{
    /**
     * Logger for this class
     */
    private static final Logger logger =
        Logger.getLogger(JingleContent.class);

    /**
     * The name space (or rather lack thereof ) that the content element
     * belongs to.
     */
    public static final String NAMESPACE = "";

    /**
     * The name of the "content" element.
     */
    public static final String ELEMENT_NAME = "content";

    /**
     * The values we currently support for the creator field.
     */
    public static enum CreatorEnum
    {
        /**
         * Indicates that content type was originally generated by the session
         * initiator
         */
        initiator,

        /**
         * Indicates that content type was originally generated by the session
         * addressee
         */
        responder
    };

    /**
     * The creator field indicates which party originally generated the content
     * type and is used to prevent race conditions regarding modifications;
     * the defined values are "initiator" and "responder" (where the
     * default is "initiator"). The value of the 'creator' attribute for a
     * given content type MUST always match the party that originally generated
     * the content type, even for Jingle actions that are sent by the other
     * party in relation to that content type (e.g., subsequent content-modify
     * or transport-info messages). The combination of the 'creator'
     * attribute and the 'name' attribute is unique among both parties to a
     * Jingle session.
     */
    private CreatorEnum creator;

    /**
     * Indicates how the content definition is to be interpreted by the
     * recipient. The meaning of this attribute matches the
     * "Content-Disposition" header as defined in RFC 2183 and applied to SIP
     * by RFC 3261. The value of this attribute SHOULD be one of the values
     * registered in the IANA Mail Content Disposition Values and Parameters
     * Registry. The default value of this attribute is "session".
     */
    private String disposition;

    /**
     * A unique name or identifier for the content type according to the
     * creator, which MAY have meaning to a human user in order to differentiate
     * this content type from other content types (e.g., two content types
     * containing video media could differentiate between "room-pan" and
     * "slides"). If there are two content types with the same value for the
     * 'name' attribute, they shall understood as alternative definitions for
     * the same purpose (e.g., a legacy method and a standards-based method for
     * establishing a voice call), typically to smooth the transition from an
     * older technology to Jingle.
     */
    private String name;

    /**
     * The values we currently support for the <tt>senders</tt> field.
     */
    public static enum SendersEnum
    {
        /**
         * Indicates that only the initiator will be generating content
         */
        initiator,

        /**
         * Indicates that no one in this session will be generating content
         */
        none,

        /**
         * Indicates that only the responder will be generating content
         */
        responder,

        /**
         * Indicates that both parties in this session will be generating
         * content
         */
        both
    };

    /**
     * Indicates which parties in the session will be generating content;
     * the allowable values are defined in the <tt>SendersEnum</tt>.
     */
    private SendersEnum senders = SendersEnum.both;

    /* (non-Javadoc)
     * @see org.jivesoftware.smack.packet.PacketExtension#getElementName()
     */
    public String getElementName()
    {
        // TODO Auto-generated method stub
        return null;
    }

    /* (non-Javadoc)
     * @see org.jivesoftware.smack.packet.PacketExtension#getNamespace()
     */
    public String getNamespace()
    {
        // TODO Auto-generated method stub
        return null;
    }

    /* (non-Javadoc)
     * @see org.jivesoftware.smack.packet.PacketExtension#toXML()
     */
    public String toXML()
    {
        // TODO Auto-generated method stub
        return null;
    }

}
