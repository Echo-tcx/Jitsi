/*
 * SIP Communicator, the OpenSource Java VoIP and Instant Messaging client.
 * 
 * Distributable under LGPL license. See terms of license at gnu.org.
 */
package net.java.sip.communicator.impl.protocol.facebook;

import net.java.sip.communicator.service.protocol.*;
import net.java.sip.communicator.util.*;

/**
 * Implements typing notifications for the Facebook protocol. The operation set
 * would simply mirror all outgoing typing notifications and make them appear as
 * incoming events generated by the contact that we are currently writing a
 * message to.
 * 
 * @author Dai Zhiwei
 */
public class OperationSetTypingNotificationsFacebookImpl
    extends AbstractOperationSetTypingNotifications<ProtocolProviderServiceFacebookImpl>
{
    private static final Logger logger =
        Logger.getLogger(OperationSetTypingNotificationsFacebookImpl.class);

    /**
     * Creates a new instance of this operation set and keeps the parent
     * provider as a reference.
     * 
     * @param provider a ref to the <tt>ProtocolProviderServiceImpl</tt> that
     *            created us and that we'll use for retrieving the underlying
     *            aim connection.
     * @param opSetPersPresence the currently valid
     *            <tt>OperationSetPersistentPresenceFacebookImpl</tt>
     *            instance.
     */
    OperationSetTypingNotificationsFacebookImpl(
        ProtocolProviderServiceFacebookImpl provider)
    {
        super(provider);
    }

    /**
     * We've gotten a typing notification from the <tt>fromContact</tt>, so
     * just put it into the GUI via firing the corresponding event.
     * 
     * @param fromContact who send us this typing notification
     * @param typingState this buddy's typing state
     * @throws IllegalStateException
     * @throws IllegalArgumentException
     */
    public void receivedTypingNotification(Contact fromContact, int typingState)
        throws IllegalStateException,
        IllegalArgumentException
    {
        if (!(fromContact instanceof ContactFacebookImpl))
            throw new IllegalArgumentException(
                "The specified contact is not a Facebook contact."
                    + fromContact);

        // and now fire the message received event.
        fireTypingNotificationsEvent(fromContact, typingState);
    }

    /**
     * Sends a notification to <tt>notifiedContatct</tt> that we have entered
     * <tt>typingState</tt>.
     * 
     * @param notifiedContact the <tt>Contact</tt> to notify
     * @param typingState the typing state that we have entered.
     * 
     * @throws java.lang.IllegalStateException if the underlying stack is not
     *             registered and initialized.
     * @throws java.lang.IllegalArgumentException if <tt>notifiedContact</tt>
     *             is not an instance belonging to the underlying
     *             implementation.
     */
    public void sendTypingNotification(final Contact notifiedContact,
        final int typingState)
        throws IllegalStateException,
        IllegalArgumentException
    {
        if (!(notifiedContact instanceof ContactFacebookImpl))
            throw new IllegalArgumentException(
                "The specified contact is not a Facebook contact."
                    + notifiedContact);

        Thread notificator = new Thread(new Runnable()
        {
            public void run()
            {
                try
                {
                    OperationSetTypingNotificationsFacebookImpl.this.parentProvider
                        .getAdapter().postTypingNotification(notifiedContact,
                            typingState);
                }
                catch (Exception e)
                {
                    logger.error(e.getMessage());
                }
            }
        });
        notificator.start();
    }
}
