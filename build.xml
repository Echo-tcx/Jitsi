<?xml version="1.0" encoding="UTF-8"?>
<!-- Created by Emil Ivov on Jul 6, 2005 8:30:22 PM-->

<project default="ant-usage" name="sip-communicator">

    <dirname property="sc.basedir" file="${ant.file.sip-communicator}"/>
    <property environment="system"/>
    <property name="jdk.home" value="/usr/java/java"/>
    <property name="dest" value="classes"/>
    <property name="bundles.dest" value="sc-bundles"/>
    <property name="bundles.dest.mac" value="${bundles.dest}/os-specific/macosx"/>
    <property name="bundles.dest.win" value="${bundles.dest}/os-specific/windows"/>
    <property name="bundles.dest.lin" value="${bundles.dest}/os-specific/linux"/>
    <property name="bundles.dest.sol" value="${bundles.dest}/os-specific/solaris"/>
    <property name="bundles.dest.freebsd" value="${bundles.dest}/os-specific/freebsd"/>
    <property name="doc" value="doc"/>
    <property name="java.doc" value="${doc}/api"/>
    <property name="lib" value="${sc.basedir}/lib"/>
    <property name="lib.win" value="${lib}/os-specific/windows"/>
    <property name="lib.win.noinst" value="${lib}/os-specific/windows/installer-exclude"/>
    <property name="lib.lin" value="${lib}/os-specific/linux"/>
    <property name="lib.lin.noinst" value="${lib}/os-specific/linux/installer-exclude"/>
    <property name="lib.mac" value="${lib}/os-specific/mac"/>
    <property name="lib.mac.noinst" value="${lib}/os-specific/mac/installer-exclude"/>
    <property name="lib.sol" value="${lib}/os-specific/solaris"/>
    <property name="lib.sol.noinst" value="${lib}/os-specific/solaris/installer-exclude"/>
    <property name="lib.freebsd" value="${lib}/os-specific/freebsd"/>
    <property name="lib.freebsd.noinst" value="${lib}/os-specific/freebsd/installer-exclude"/>
    <property name="lib.noinst" value="${lib}/installer-exclude"/>
    <property name="native.libs" value="${lib}/native"/>
    <property name="src" value="${sc.basedir}/src"/>
    <property name="src2" value="${sc.basedir}/test"/>
    <property name="testsrc" value="${src2}"/>
    <property name="home" value="${system.HOME}"/>
    <property name="bin" value="sip-communicator.bin"/>
    <property name="utest.bin" value="sip-communicator.utest.bin"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="test.html.reports.dir" value="${test.reports.dir}/html"/>
    <property name="test.local.properties.file" value="${lib}/testing.properties"/>
    <property name="test.accounts.properties.file" value="${lib}/accounts.properties"/>
    <property name="release" value="release"/>
    <property name="log" value="log"/>
    <property name="release.src" value="${release}/install"/>
    <property name="resources" value="${dest}/resources"/>
    <property name="inst.resrc" value="${sc.basedir}/resources/install"/>
    <property name='j2se_api' value='http://java.sun.com/j2se/1.5/docs/api' />
    <property name='maxwarns' value='10000' />
    <property name='java.net.preferIPv6Addresses' value='true' />

    <!-- set the build label property and make it take the cc bild into account -->
    <condition property="build.label"
               value="nightly.${label}">
        <isset property="label"/>
    </condition>

    <!-- windows specific properties -->
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>

    <condition property="os.lib.home" value="${lib.win}">
        <isset property="is.running.windows"/>
    </condition>

    <!-- Make sure we use the windows-64 natives if this is 64-bit Windows -->
    <condition property="path"
            value="${lib}/native/windows-64:${system.PATH}">
        <and>
            <isset property="is.running.windows"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- Otherwise and if this is still Windows, go for the windows natives
         (i.e. os.arch==i386) -->
    <condition property="path"
            value="${lib}/native/windows:${system.PATH}">
        <isset property="is.running.windows"/>
    </condition>
    <!-- At last i.e. if this is not Windows, use the system PATH environment
         variable -->
    <property name="path" value="${system.PATH}"/>

    <condition property="bundles.dest.os" value="${bundles.dest.win}">
        <isset property="is.running.windows"/>
    </condition>

    <!-- linux specific properties -->
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>

    <condition property="os.lib.home" value="${lib.lin}">
        <isset property="is.running.linux"/>
    </condition>

    <!-- make sure we use the linux-64 natives if this is a 64 bit system-->
    <condition property="ld.library.path"
            value="${lib}/native/linux-64:${system.LD_LIBRARY_PATH}">
        <and>
            <isset property="is.running.linux"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- otherwise we go for the normal linuxnatives (i.e. os.arch==i386)-->
    <condition property="ld.library.path"
            value="${lib}/native/linux:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.linux"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.lin}">
        <isset property="is.running.linux"/>
    </condition>

    <!-- solaris specific properties -->
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>

    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/solaris">
        <isset property="is.running.solaris"/>
    </condition>

    <condition property="ld.library.path"
              value="${lib}/native/solaris:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.solaris"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.sol}">
        <isset property="is.running.solaris"/>
    </condition>

    <!-- mac specific properties -->
    <condition property="is.running.macos" value="${os.name}">
        <os family="mac"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/mac">
        <isset property="is.running.macos"/>
    </condition>

    <condition property="dyld.library.path"
        value="${lib}/native/mac:${system.DYLD_LIBRARY_PATH}">
        <isset property="is.running.macos"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.mac}">
        <isset property="is.running.macos"/>
    </condition>

    <!-- FreeBSD specific properties -->
    <condition property="is.running.freebsd" value="${os.name}">
        <equals arg1="${os.name}" arg2="freebsd" casesensitive="false" trim="true"/>
    </condition>
    
    <!-- make sure we use the freebsd-64 natives if this is a 64 bit system-->
    <condition property="ld.library.path"
            value="${lib}/native/freebsd-64:${system.LD_LIBRARY_PATH}">
        <and>
            <isset property="is.running.freebsd"/>
            <os arch="amd64" />
        </and>
    </condition>
    <!-- otherwise we go for the normal freebsd natives (i.e. os.arch==i386)-->
    <condition property="ld.library.path"
            value="${lib}/native/freebsd:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.freebsd"/>
    </condition>

    <condition property="os.lib.home" value="${lib}/os-specific/freebsd">
        <isset property="is.running.freebsd"/>
    </condition>

    <condition property="ld.library.path"
              value="${lib}/native/freebsd:${system.LD_LIBRARY_PATH}">
        <isset property="is.running.freebsd"/>
    </condition>

    <condition property="bundles.dest.os" value="${bundles.dest.freebsd}">
        <isset property="is.running.freebsd"/>
    </condition>

    <!-- set the os.lib.home here in case it was not set before -->
    <property name="os.lib.home" value="${lib}"/>

    <!-- set the jmf.properties here in case they were not set before -->
    <property name="jmf.jar" value="${os.lib.home}/installer-exclude/jmf.jar"/>
    <property name="sound.jar" value="${os.lib.home}/installer-exclude/sound.jar"/>
    <!-- end jmf.home-->

    <property name="jdic_stub.jar" value="${os.lib.home}/jdic_stub.jar"/>

    <property name="profiler.args" value="" />
    <property name="profiler.bootdelegation" value="" />
    <property name="profiler.autostart" value="" />

    <tstamp>
        <format property="build.date" pattern="dd-MM-yyyy"/>
    </tstamp>

    <path id="project.source.path">
        <!-- refer to both main and test source files. -->
        <pathelement location="${src}"/>
        <pathelement location="${src2}"/>
    </path>

    <path id="project.class.path">
        <pathelement location="${lib}"/>

        <pathelement location="${bundles.dest}/sc-launcher.jar"/>
        <!-- Add this bundle to the global class path as we need
             the ScLogFormatter there-->
        <pathelement location="${bundles.dest}/util.jar"/>
        <!-- for mac specific plugins -->
        <pathelement location="/System/Library/Java"/>

        <!-- Include all JAR files found in lib and any of its subdirectories. -->
        <fileset dir="${lib}">
            <include name="*.jar"/>
            <include name="installer-exclude/*.jar"/>
            <include name="bundle/*.jar"/>
        </fileset>

        <fileset dir="${os.lib.home}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.class.path">
        <path refid="project.class.path"/>
        <pathelement location="${dest}"/>
        <!-- Add all jmf's and jdic's to the compile class path to enable
             cross compilation. -->
        <fileset dir="${lib}">
            <include name="os-specific/**/*.jar"/>
        </fileset>
    </path>

    <path id="debug.class.path">
        <!-- used by netbeans but might be useful elsewhere. -->
        <path refid="project.class.path"/>

        <!-- Include all test JAR files . -->
        <fileset dir="${bundles.dest}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="simple.test.class.path">
        <!-- used for testing classes outside felix -->
        <path refid="debug.class.path"/>
        <!-- Include all test class files, even if they exist
             in a jar file already. -->
        <pathelement location="${dest}" />
    </path>

    <!-- Import installation build xml -->
    <import file="${inst.resrc}/build.xml"/>

    <!-- default Ant target does nothing except print helpful options -->
    <!-- Ant-external target will appear in -projecthelp output       -->
    <target name="ant-usage"
       description="simply execute 'ant' to discover the most useful targets.">
       <echo message="Useful ant commands for the SIP Communicator Project..." />
       <echo message="'ant rebuild' for a safe clean/build sequence" />
       <echo message="'ant rebuild run' for a safe clean/build/run" />
       <echo message="'ant make run' for incremental build/run" />
       <echo message="'ant run' to run the last build (use with care!)" />
       <echo message="'ant test' to run the tests over the last build" />
       <echo message="'ant rebuild test' for safe clean/build/test sequence" />
       <echo message="'ant make test' for incremental build/test sequence" />
       <echo message="'ant -projecthelp' for other useful build targets" />
       <echo message="'ant -help' for Ant help" />
    </target>

    <!-- java compile -->
    <target name="compile" depends="init,version">
        <!--internal-target- compiles the entire project source tree -->
        <javac classpathref="compile.class.path" debug="true"
            deprecation="true" destdir="${dest}" nowarn="false"
            source="1.5" target="1.5" memoryMaximumSize="400M" fork="true">
                <src path="${src}"/>
                <src path="${src2}"/>
                <include name="**/*.java" />
                <exclude name="net/java/sip/communicator/launcher/*.java" />
                <compilerarg line="-Xlint -Xlint:-serial -Xmaxwarns ${maxwarns}"/>
        </javac>
        <!--
            sc-launcher.jar needs to be compatible with 1.4 in order to enable
            notifying the user that a higher version of the jre is necessary.
        -->
        <javac classpathref="compile.class.path" debug="true"
            deprecation="true" destdir="${dest}" nowarn="false"
            source="1.4" target="1.4" memoryMaximumSize="400M" fork="true">
                <src path="${src}"/>
                <src path="${src2}"/>
                <include name="net/java/sip/communicator/launcher/*.java" />
                <compilerarg line="-Xlint -Xmaxwarns ${maxwarns}"/>
        </javac>
    </target>

    <!-- clean -->
    <target name="clean" depends="clean-bundle-repositories,clean-test-reports,clean-macosx"
        description="Remove all generated files and prepare for a clean build.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
            <fileset dir="${bundles.dest}"/>
            <fileset dir="${java.doc}"/>
            <fileset dir="${release}"/>
            <fileset dir="${log}"/>
        </delete>
    </target>

    <!-- internal target - removes the current set of test reports, so
         residual data is not left to confuse a cached browser -->
    <target name="clean-test-reports">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${test.reports.dir}"/>
        </delete>
    </target>

    <!-- internal target - removes the OSGI repositories, so that next run
         recreates them -->
    <target name="clean-bundle-repositories">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${bin}"/>
            <fileset dir="${utest.bin}"/>
        </delete>
    </target>

    <!-- resource -->
    <target name="resource">
        <!--internal-target- Copies all resource file to the ${dest} dir -->
        <copy todir="${dest}">
            <fileset dir="${src}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.PNG"/>
                <include name="**/*.jpg"/>
                <include name="**/*.xml"/>
                <include name="**/*.themerc"/>
                <include name="**/gtkrc"/>
                <include name="**/*.css"/>
                <include name="**/*.properties"/>
            </fileset>
            <fileset dir="${src2}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        <copy todir="${resources}">
           <fileset dir="${sc.basedir}/resources">
                <include name="**/*"/>
                <exclude name="**/languages/**"/>
                <exclude name="**/*.svg"/>
           </fileset>
        </copy>
    </target>

    <target name="native2ascii">
        <!-- internal target -
             convert language property files encoding from UTF-8 to ASCII,
             save converted files in ${resources}/languages dir -->
        <native2ascii
            src="${sc.basedir}/resources/languages"
            dest="${resources}/languages"
            encoding="UTF-8"
            includes="**/*.properties"/>
    </target>

    <!-- JAVADOC -->
    <target name="javadoc"
        description="Generates project javadoc.">
        <javadoc author="true" destdir="${java.doc}" package="true"
            version="true" use="true" windowtitle="SIP Communicator API"
            classpathref="compile.class.path" source="1.5+" maxmemory="256m">
            <packageset dir="${src}">
                <exclude name="net/java/sip/communicator/impl/version/**"/>
                <include name="**"/>
            </packageset>
            <tag name="todo" description="To do:"/>
            <tag name="note" description="Note:"/>
            <link href="${j2se_api}" />
            <header>
                <![CDATA[
                <b> SIP Communicator: the OpenSource Java VoIP and Instant Messaging client. </b>
                ]]>
            </header>
            <bottom>
                <![CDATA[
                <font size="-1">
                    <a href="http://sip-communicator.org"> SIP Communicator, the OpenSource Java VoIP and Instant Messaging client. </a>
                    <br>
                    <a href="http://gnu.org"> Distributable under LGPL license. </a>
                    <br>
                    </font>
                 ]]>
             </bottom>
        </javadoc>
    </target>

    <!--PACKAGE-->
    <!--Copy resource files and update bundles jars. -->
    <target name="package" depends="resource,native2ascii,bundles"/>

    <!--MAKE-->
    <target name="make" depends="clean-bundle-repositories,compile,package"
        description="Incremental compile and package the project."/>

    <!--REBUILD-->
    <target name="rebuild" depends="clean,make"
        description="Clean and make the project (including bundles).">
        <echo message="ver=${sip-communicator.version}"/>
    </target>

    <!-- Determines SIP Communicator version if any-->
    <target name="-pre-version" if="build.label" >
        <!-- create a class that would contain our nightly build.id if any -->
        <copy file="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java.tmpl"
              tofile="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java"
              overwrite="true"/>

        <!-- set the build id according to the cruisecontrol property -->
        <replace file="${src}/net/java/sip/communicator/impl/version/NightlyBuildID.java"
            token="build.id" value="${build.label}"/>

        <!-- create a class that would contain our nightly revision.id if any -->
        <copy file="${src}/net/java/sip/communicator/impl/version/RevisionID.java.tmpl"
              tofile="${src}/net/java/sip/communicator/impl/version/RevisionID.java"
              overwrite="true"/>

        <!-- set the build id according to the cruisecontrol property -->
        <replace file="${src}/net/java/sip/communicator/impl/version/RevisionID.java"
            token="revision.id" value="${build.label}"/>
    </target>

    <!-- SIP Communicator Version -->
    <target name="version" depends="-pre-version">
        <!-- Recompile ant task classes-->
        <delete failonerror="false">
            <fileset dir="${dest}" includes="net/java/sip/communicator/impl/version/*.class"/>
        </delete>
        <javac classpathref="compile.class.path" destdir="${dest}" source="1.5" target="1.5">
            <src path="${src}"/>
            <include name="net/java/sip/communicator/impl/version/NightlyBuildID.java" />
            <include name="net/java/sip/communicator/impl/version/VersionImpl.java" />
            <include name="net/java/sip/communicator/impl/version/SipCommunicatorVersionTask.java" />
        </javac>


        <taskdef name="sip-communicator-version" classpath="${dest}"
                 classname="net.java.sip.communicator.impl.version.SipCommunicatorVersionTask"/>

        <sip-communicator-version property="sip-communicator.version" />

        <echo message="SIP Communicator version ${sip-communicator.version}" />
    </target>

    <!--INIT-->
    <target name="init" >
        <mkdir dir="${dest}"/>
        <mkdir dir="${doc}"/>
        <mkdir dir="${java.doc}"/>
        <mkdir dir="${bundles.dest}"/>

        <!-- create dirs for os specific bundles -->
        <mkdir dir="${bundles.dest}/os-specific"/>
        <mkdir dir="${bundles.dest.mac}"/>
        <mkdir dir="${bundles.dest.lin}"/>
        <mkdir dir="${bundles.dest.win}"/>
        <mkdir dir="${bundles.dest.freebsd}"/>

        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${test.reports.dir}/html"/>
        <mkdir dir="${release}"/>
        <mkdir dir="${log}"/>
    </target>


    <!-- - - - - - - - - - - - - - UNIT TESTING - - - - - - - - - - - - - - -->

    <!--PREPARE-TESTING-ACCOUNTS-->
    <target name="prepare-local-accounts">
        <!--internal-target- setup testing accounts properties -->
        <!-- The following local file should contain a list of protocol
             account initialization properties, such as SIP server addresses
             and usernames, ICQ uin-s and passwords, AIM screennames and etc.
             You should create the file based on lib/account.properties.template
             and set all the empty fields as indicated. -->
        <available property="accounts.properties.present"
                   file="${test.accounts.properties.file}"/>
        <fail unless="accounts.properties.present"
              message="${test.accounts.properties.file} not found - did you copy the template?"/>
        <property file="${test.accounts.properties.file}"/>
    </target>

    <!--PREPARE-TESTS-TO-BE-RUN-->
    <target name="identify-test">
        <!--internal-target- is a single slick defined to be run alone? -->
        <condition property="test.name.known">
            <!-- has a single test class has been defined?    -->
            <!-- e.g. ant test -Dtest.name=SlickName    -->
            <isset property="test.name"/>
        </condition>
    </target>

    <target name="prepare-single-test"
      depends="identify-test"
            if="test.name.known">
        <!--internal-target- prepare to run a single Service Impl Compatibility Kit -->
        <!-- extract the simple Test class name...
             Command prompt ant calls should define the property as the
             simple name (without the package hierarchy),
             e.g. -Dtest.name=GibberishProtocolProviderServiceLick
             netbeans must format the property using the relative-path-noext
             rule so that we can extract the simple name. The Felix
             slick runner ONLY works with unqualified class names. -->
        <basename property="short.test.name" file="${test.name}"/>
        <!-- Tell the slick runner which Test class to run. (This will prevent
             the default external list from being defined.) At this
             stage we don't know if it will run under felix or standalone-->
        <property name="net.java.sip.communicator.slick.runner.TEST_LIST"
                     value="${short.test.name}"/>
        <property name="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                     value="${short.test.name}"/>
    </target>

    <target name="prepare-all-tests"
            depends="clean-test-reports,prepare-single-test">
        <!--internal-target- prepare to run all selected Service Impl Compatibility Kits -->
        <!-- load properties needed for running any/all automated tests.
             n.b. the local file will select what is meant on this system by
             "all tests" UNLESS a single test has already been selected. (This
             is because ant will not replace a property value once set.) -->
        <available property="test.properties.present"
                   file="${test.local.properties.file}"/>
        <fail unless="test.properties.present"
              message="${test.local.properties.file} not found - did you copy the template?"/>
        <property file="${test.local.properties.file}"/>
        <echo message="tests prepared: ${net.java.sip.communicator.slick.runner.TEST_LIST}" />
        <echo message="slickless tests prepared: ${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}" />
    </target>

    <!--RUN-TESTS-->
    <target name="test"
        depends="prepare-all-tests,prepare-local-accounts,deploy-os-specific-bundles"
        description="Starts felix and runs selected Service Impl Compatibility Kits.">

        <!-- Do the testing itself. Note that we don't fail on error as we need
             to generate an html report before leaving this target.-->
        <java classname="org.apache.felix.main.Main"
            fork="true"
            failonerror="false"
            resultproperty="test.result.code"
            classpathref="project.class.path">

            <!-- Tell felix to run as a test environment-->
            <sysproperty key="felix.config.properties"
                         value="file:${lib}/felix.unit.test.properties"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                         value="${test.reports.dir}"/>

            <!-- Tell the slick runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.TEST_LIST}"/>

            <!-- Tell the slickless runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}"/>

            <!-- use a meta contact list file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONTACTLIST_FILE_NAME"
                         value="net.java.sip.communicator.CONTACTLIST_FILE_NAME"/>
            <!-- use a configuration file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONFIGURATION_FILE_NAME"
                         value="net.java.sip.communicator.CONFIGURATION_FILE_NAME"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <!-- Tell all protocol testers their account details. -->
            <syspropertyset id="accounts">
              <propertyref prefix="accounts"/>
              <propertyref prefix="net"/>
            </syspropertyset>

            <!-- Setting properties necessary for dependencies on native libs.-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>
            <sysproperty key="jna.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>
            <env key="DISPLAY" path=":0"/>

        </java>

        <!-- Generate the html report.
             Run it quietly (i.e. redirect the output) because we don't won't to
             see its "Build Successful" output line as users might confuse it
             for a general build success while this might not be the case.-->
        <echo message="Generating HTML test reports ..."/>
        <java fork="true"
              classname="org.apache.tools.ant.launch.Launcher"
              classpath="${java.class.path}:${lib.noinst}/xalan-2.6.0.jar.ant"
              failonerror="true"
              output="${test.html.reports.dir}/output.txt">
            <arg value="htmlreport"/>
        </java>
        <echo message="Done."/>
        <echo/><echo/>
        <echo message="Test results available in ./test-reports/html/index.html "/>
        <echo/>

        <!-- Check whether testing went alright and fail if not.-->
        <condition property="testing.failed">
          <not>
            <equals arg1="0"
            arg2="${test.result.code}"
            casesensitive="false" trim="true"/>
          </not>
        </condition>
        <fail if="testing.failed"/>
    </target>

    <!-- We use this target from within the test target in order to generate
         a human readable test report. We do not directly use the htmlreport
         target because we  need to include xalan in the classpath before we
         do.-->
    <target name="htmlreport">
      <junitreport todir="${test.reports.dir}">
        <fileset dir="${test.reports.dir}">
          <include name="SC-TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${test.html.reports.dir}"/>
      </junitreport>
    </target>


    <target name="run-simple-tests"
            depends="prepare-all-tests,prepare-local-accounts,deploy-os-specific-bundles"
            description="runs selected non-felix tests under junit.">

        <junit haltonfailure="true" fork="true">
            <formatter type="brief" usefile="false"/>
            <test name="net.java.sip.communicator.slick.slickless.SlicklessTests"/>
            <classpath refid="simple.test.class.path" />

            <!-- Tell the slickless runner which Test classes to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST"
                         value="${net.java.sip.communicator.slick.runner.SLICKLESS_TEST_LIST}"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                         value="${test.reports.dir}"/>

            <!-- use a meta contact list file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONTACTLIST_FILE_NAME"
                         value="net.java.sip.communicator.CONTACTLIST_FILE_NAME"/>
            <!-- use a configuration file different to normal client. -->
            <sysproperty key="net.java.sip.communicator.CONFIGURATION_FILE_NAME"
                         value="net.java.sip.communicator.CONFIGURATION_FILE_NAME"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <!-- Tell all protocol testers their account details. -->
            <syspropertyset id="accounts">
              <propertyref prefix="accounts"/>
              <propertyref prefix="net"/>
            </syspropertyset>
        </junit>
    </target>


    <!--RUN-SIP-COMMUNICATOR -->
    <target name="run" depends="deploy-os-specific-bundles"
        description="Starts felix and runs sip-comunicator gui (use latest build).">

        <!-- we allow users to pass command line args using the "args" system
             property. However we need to manually set tha prop to an empty
             string here or otherwise the application would get an argument with
             the value ${args}-->
        <property name="args" value=""/>

        <!-- SIP Communicator on Mac OS X uses a JVMTI agent to handle kAEGetURL
             AppleScript events. -->
        <condition property="jvmarg.line"
                value="-agentlib:AEGetURLEventHandlerAgent -Xdock:name='SIP Communicator' -Xdock:icon='resources/images/logo/sc_logo_128x128.icns'"
                else="">
            <isset property="is.running.macos"/>
        </condition>

        <condition property="jvm.maxheapsize"
              value="-Xmx256m"
              else="" > 
             <os arch="i386" />
        </condition>

         <!-- forking prevents from debugging -->
        <java classname="net.java.sip.communicator.launcher.SIPCommunicator"
            fork="true"
            failonerror="true"
            classpathref="project.class.path">

            <!-- Sets the charset for the messages -->
            <!--sysproperty key="icq.custom.message.charset" value="windows-1252"/-->

            <!-- Tell felix to run sip-communicator-->
            <sysproperty key="felix.config.properties"
                value="file:${lib}/felix.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <sysproperty key="java.net.preferIPv6Addresses"
                value="${java.net.preferIPv6Addresses}"/>

            <!--sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                    value="${user.home}/schome"/-->

             <!--sysproperty key="smack.debugEnabled"
                     value="true"/>
             <sysproperty key="smack.debuggerClass"
                     value="org.jivesoftware.smack.debugger.ConsoleDebugger"/-->

            <!-- Setting properties necessary for dependencies on native libs.-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>
            <sysproperty key="jna.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>

            <!-- pass l10n properties from ant call for
                 easy translation debugging -->
            <sysproperty key="user.language" value="${user.language}" />
            <sysproperty key="user.country" value="${user.country}" />
            <sysproperty key="user.variant" value="${user.variant}" />

            <!-- make sure that we automatically enable system.out when running
                 SIP Communicator from Ant-->
            <arg line="--debug"/>
            <!-- pass to SC args that have been specified by the user -->
            <arg line="${args}"/>

            <sysproperty key="org.osgi.framework.bootdelegation"
                value="${profiler.bootdelegation}" />
            <sysproperty key="felix.auto.start.68"
                value="${profiler.autostart}" />

            <!-- add some eventual profiler args, prevent server-class
                 detection because -server uses much more memory for 32-bit OS
                 (64-bit always used -server) -->
            <jvmarg line="${profiler.args} ${jvmarg.line} 
              -client ${jvm.maxheapsize}"/>

            <sysproperty key="apple.laf.useScreenMenuBar" value="true" />
        </java>
    </target>

    <!--RUN-SIP-COMMUNICATOR-WITH-INTEGRATED-PROFILER -->
    <target name="run-with-profiler"
        description="Starts felix and runs sip-comunicator gui (use latest build) with the hooked classloader."
        depends="bundle-plugin-profiler4j">

        <antcall target="run">
            <param name="profiler.args"
                value="-Xmx128m -javaagent:${lib.noinst}/profiler4j-1.0-beta3-SC.jar" />
            <param name="profiler.bootdelegation"
                value="net.sf.profiler4j.agent.*" />
            <param name="profiler.autostart"
                value="reference:file:sc-bundles/profiler4j.jar" />
        </antcall>
    </target>

    <target name="run-v4" description="Starts SC with a preference for IPv4.">
        <ant target="run">
          <property name="java.net.preferIPv6Addresses" value="false"/>
        </ant>
    </target>

    <!--PROFILE-SIP-COMMUNICATOR-IN-NETBEANS-IDE -->
    <target name="profile" depends="bundle-plugin-profiler4j,deploy-os-specific-bundles"
        description="Profile Project">
        <fail unless="netbeans.home">
            This target can only run inside the NetBeans IDE.
        </fail>

        <nbprofiledirect>
            <classpath> <pathelement location="${dest}"/> </classpath>
        </nbprofiledirect>

        <java classname="net.java.sip.communicator.launcher.SIPCommunicator"
            fork="true"
            failonerror="true"
            classpathref="project.class.path">

            <jvmarg value="${profiler.info.jvmargs.agent}"/>

            <!-- Tell felix to run sip-communicator-->
            <sysproperty key="felix.config.properties"
                value="file:${lib}/felix.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="${lib}/logging.properties"/>

            <sysproperty key="java.net.preferIPv6Addresses"
                value="false"/>

            <sysproperty key="net.java.sip.communicator.SC_HOME_DIR_LOCATION"
                    value="${user.home}/schome"/>

            <!-- Setting properties necessary for dependencies on native libs-->
            <sysproperty key="java.library.path"
                path="${ld.library.path}:${path}:${dyld.library.path}"/>

            <!-- pass l10n properties from ant call for
                     easy translation debugging -->
            <sysproperty key="user.language" value="${user.language}" />
            <sysproperty key="user.country" value="${user.country}" />
            <sysproperty key="user.variant" value="${user.variant}" />

            <env key="LD_LIBRARY_PATH" path="${ld.library.path}"/>
            <env key="PATH" path="${path}"/>
            <env key="DYLD_LIBRARY_PATH" path="${dyld.library.path}"/>

        </java>

        <delete file="${bundles.dest}/profiler4j.jar"/>
    </target>

    <!-- we run this target before we run SC in order to copy os-specific
             bundles from sc-bundles/osname to its parent sc-bundles-->
    <target name="deploy-os-specific-bundles" if="bundles.dest.os">

        <copy todir="${bundles.dest}">
            <fileset dir="${bundles.dest.os}">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
    </target>

    <!--CRUISE CONTROL BUILD LOOP target-->
    <target name="cc-buildloop" depends="rebuild,test"
            description="Comprehensive (paranoid) rebuild and test (used by Cruise Control)."/>


    <!-- - - - - - - - - - - - - - BUNDLE BUILDING TARGETS - - - - - - - -       -->
    <!--ALL BUNDLES-->
    <target name="bundles"
        depends="bundle-sc-launcher,bundle-util,bundle-configuration,bundle-configuration-slick,
        bundle-history,bundle-history-slick,bundle-messagehistory, bundle-msghistory-slick,
        bundle-callhistory, bundle-callhistory-slick, bundle-popupmessagehandler-slick,
        bundle-netaddr,bundle-netaddr-slick,bundle-slickless,
        bundle-slick-runner,bundle-sip,bundle-sip-slick,bundle-fileaccess,
        bundle-fileaccess-slick,bundle-neomedia,
        bundle-resource-manager,bundle-resources-defaultpack,
        bundle-protocol,bundle-icq,bundle-icq-slick,bundle-mock,bundle-smacklib,
        bundle-jabber,bundle-jabber-slick,bundle-swing-ui,bundle-ui-service,
        bundle-msn,bundle-msn-slick,bundle-yahoo,bundle-yahoo-slick,
        bundle-contactlist,meta-contactlist,meta-contactlist-slick,
        bundle-plugin-icqaccregwizz,bundle-plugin-jabberaccregwizz,
        bundle-plugin-msnaccregwizz,bundle-plugin-sipaccregwizz,
        bundle-plugin-yahooaccregwizz,bundle-plugin-aimaccregwizz,
        bundle-version,bundle-version-impl,bundle-shutdown-timeout,
        bundle-growlnotification,bundle-swingnotification,bundle-galagonotification,
        bundle-sparkle, bundle-plugin-branding, bundle-audionotifier,
        bundle-osdependent,bundle-browserlauncher,bundle-gibberish,
        bundle-gibberish-slick,bundle-plugin-gibberishaccregwizz,
        bundle-plugin-call-history-form,
        bundle-rss, bundle-rss-slick,bundle-plugin-rssaccregwizz,
        bundle-zeroconf,bundle-plugin-zeroconfaccregwizz,bundle-plugin-whiteboard,
        bundle-irc,bundle-plugin-ircaccregwizz,
        bundle-pluginmanager,bundle-notification,bundle-notification-config,
        bundle-ssh,bundle-plugin-sshaccregwizz,
        bundle-contacteventhandler,bundle-plugin-contactinfo,
        bundle-plugin-accountinfo,bundle-plugin-chatalerter,
        bundle-plugin-autoaway, bundle-keybindings,
        bundle-plugin-keybindingChooser,bundle-plugin-globalproxyconfig,
        bundle-jfontchooserlib,
        bundle-updatecheckplugin,
        bundle-dict,bundle-plugin-dictaccregwizz,
        bundle-plugin-simpleaccreg,bundle-plugin-generalconfig,
        bundle-plugin-googletalkaccregwizz,bundle-argdelegation-service,
        bundle-argdelegation,bundle-zrtp4j,
        bundle-filehistory,bundle-metahistory,bundle-metahistory-slick,
        bundle-plugin-facebookaccregwizz,
        bundle-bouncycastle,bundle-plugin-otr,bundle-plugin-iptelaccregwizz,
        bundle-contactsource,bundle-plugin-reconnect"/>

    <!--BUNDLE-SC-LAUNCHER-->
    <target name="bundle-sc-launcher">
        <jar compress="false" destfile="${bundles.dest}/sc-launcher.jar">
            <zipfileset dir="${dest}/net/java/sip/communicator/launcher"
                prefix="net/java/sip/communicator/launcher"/>
        </jar>
    </target>

    <!--BUNDLE-HISTORY-->
    <target name="bundle-history">
        <jar compress="false" destfile="${bundles.dest}/history.jar"
            manifest="${src}/net/java/sip/communicator/impl/history/history.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/history"
                prefix="net/java/sip/communicator/service/history"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/history"
                prefix="net/java/sip/communicator/impl/history" />
        </jar>
    </target>

    <!--BUNDLE-HISTORY-SLICK-->
    <target name="bundle-history-slick">
        <jar compress="false" destfile="${bundles.dest}/history-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/history/history.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/history"
                prefix="net/java/sip/communicator/slick/history"/>
        </jar>
    </target>

    <!--BUNDLE-MESSAGEHISTORY-->
    <target name="bundle-messagehistory">
        <jar compress="false" destfile="${bundles.dest}/msghistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/msghistory/msghistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/msghistory"
                prefix="net/java/sip/communicator/service/msghistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/msghistory"
                prefix="net/java/sip/communicator/impl/msghistory" />
        </jar>
    </target>

    <!--BUNDLE-MESSAGEHISTORY-SLICK-->
    <target name="bundle-msghistory-slick">
        <jar compress="false" destfile="${bundles.dest}/msghistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/msghistory/msghistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/msghistory"
                prefix="net/java/sip/communicator/slick/msghistory"/>
        </jar>
    </target>

    <!--BUNDLE-CALLHISTORY-->
    <target name="bundle-callhistory">
        <jar compress="false" destfile="${bundles.dest}/callhistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/callhistory/callhistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/callhistory"
                prefix="net/java/sip/communicator/service/callhistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/callhistory"
                prefix="net/java/sip/communicator/impl/callhistory" />
        </jar>
    </target>

    <!--BUNDLE-CALLEHISTORY-SLICK-->
    <target name="bundle-callhistory-slick">
        <jar compress="false" destfile="${bundles.dest}/callhistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/callhistory/callhistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/callhistory"
                prefix="net/java/sip/communicator/slick/callhistory"/>
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-->
    <target name="bundle-fileaccess">
        <jar compress="false" destfile="${bundles.dest}/fileaccess.jar"
            manifest="${src}/net/java/sip/communicator/impl/fileaccess/fileaccess.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/fileaccess"
                prefix="net/java/sip/communicator/service/fileaccess"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/fileaccess"
                prefix="net/java/sip/communicator/impl/fileaccess" />
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-SLICK-->
    <target name="bundle-fileaccess-slick">
        <jar compress="false" destfile="${bundles.dest}/fileaccess-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/fileaccess/fileaccess.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/fileaccess"
                prefix="net/java/sip/communicator/slick/fileaccess"/>
        </jar>
    </target>

    <!--BUNDLE-UTIL-->
    <target name="bundle-util" depends="version">
        <!-- Create a properties file that the arg handler could use
        to determine SC's version -->
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
                    message="APPLICATION_NAME=SIP Communicator${line.separator}" />
        <echo file="${dest}/net/java/sip/communicator/util/launchutils/version.properties"
              message="APPLICATION_VERSION=${sip-communicator.version}${line.separator}"
              append="true"/>
        <!-- Create the util.jar-->
        <jar compress="false" destfile="${bundles.dest}/util.jar"
            manifest="${src}/net/java/sip/communicator/util/util.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/util"
                prefix="net/java/sip/communicator/util"/>
            <zipfileset src="${lib.noinst}/dnsjava-2.0.3.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/laf-widget.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-->
    <target name="bundle-configuration">
        <jar
            compress="false"
            destfile="${bundles.dest}/configuration.jar"
            manifest="${src}/net/java/sip/communicator/impl/configuration/configuration.manifest.mf" >

            <zipfileset dir="${dest}/net/java/sip/communicator/service/configuration"
                prefix="net/java/sip/communicator/service/configuration"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/configuration"
                prefix="net/java/sip/communicator/impl/configuration" />
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-SLICK-->
    <target name="bundle-configuration-slick">
        <jar compress="false" destfile="${bundles.dest}/configuration-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/configuration/configuration.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/configuration"
                prefix="net/java/sip/communicator/slick/configuration"/>
        </jar>
    </target>

    <!--BUNDLE-JUNIT -->
    <target name="bundle-junit">
        <jar compress="true" destfile="lib/bundle/junit.jar"
            manifest="${testsrc}/junit/junit.manifest.mf">
            <zipfileset src="${lib.noinst}/junit.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-MEDIA-->
    <target name="bundle-media">
        <!-- Creates a bundle containing the impl of the media package and
             the win jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.win}/media.jar"
            manifest="${src}/net/java/sip/communicator/impl/media/media.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/media"
                prefix="net/java/sip/communicator/service/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/media"
                prefix="net/java/sip/communicator/impl/media"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset src="${lib.win.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.win.noinst}/sound.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sdp.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>

          <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

        <!-- Creates a bundle containing the impl of the media package and
             the linux jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.lin}/media.jar"
            manifest="${src}/net/java/sip/communicator/impl/media/media.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/media"
                prefix="net/java/sip/communicator/service/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/media"
                prefix="net/java/sip/communicator/impl/media"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset src="${lib.lin.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sdp.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>

          <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

        <!-- Creates a bundle containing the impl of the media package and
             the mac jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.mac}/media.jar"
            manifest="${src}/net/java/sip/communicator/impl/media/media.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/media"
                prefix="net/java/sip/communicator/service/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/media"
                prefix="net/java/sip/communicator/impl/media"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset src="${lib.mac.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sdp.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>

          <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

    </target>

    <!--BUNDLE-NEOMEDIA-->
    <target name="bundle-neomedia">
        <!-- Creates a bundle containing the impl of the neomedia package and
             the win jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.win}/neomedia.jar"
            manifest="${src}/net/java/sip/communicator/impl/neomedia/neomedia.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/neomedia"
                prefix="net/java/sip/communicator/service/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/neomedia"
                prefix="net/java/sip/communicator/impl/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset src="${lib.win.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.win.noinst}/sound.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

        <!-- Creates a bundle containing the impl of the neomedia package and
             the linux jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.lin}/neomedia.jar"
            manifest="${src}/net/java/sip/communicator/impl/neomedia/neomedia.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/neomedia"
                prefix="net/java/sip/communicator/service/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/neomedia"
                prefix="net/java/sip/communicator/impl/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset src="${lib.lin.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

        <!-- Creates a bundle containing the impl of the neomedia package and
             the mac jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.mac}/neomedia.jar"
            manifest="${src}/net/java/sip/communicator/impl/neomedia/neomedia.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/neomedia"
                prefix="net/java/sip/communicator/service/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/neomedia"
                prefix="net/java/sip/communicator/impl/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset src="${lib.mac.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>

        <!-- Creates a bundle containing the impl of the neomedia package and
             the standard jmf implementation.-->
        <jar
            compress="false" destfile="${bundles.dest.freebsd}/neomedia.jar"
            manifest="${src}/net/java/sip/communicator/impl/neomedia/neomedia.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/neomedia"
                prefix="net/java/sip/communicator/service/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/neomedia"
                prefix="net/java/sip/communicator/impl/neomedia"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset dir="${resources}/images/impl/media"
                prefix="resources/images/impl/media"/>
            <zipfileset src="${lib.noinst}/jmf.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/fmj.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jspeex.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/lti-civil-no_s_w_t.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-MEDIA-SLICK-->
    <target name="bundle-media-slick">
        <!-- Creates a bundle containing the slick for the media package."-->
        <jar compress="false" destfile="${bundles.dest}/media-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/media/media.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/media"
                prefix="net/java/sip/communicator/slick/media"/>
        </jar>
    </target>

    <!--BUNDLE-SERVICEBINDER -->
    <target name="bundle-servicebinder">
        <jar compress="true" destfile="lib/bundle/servicebinder.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib}/servicebinder.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package" value="org.osgi.framework"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-ARCHITECTUREVIEWER -->
    <target name="bundle-architectureviewer">
        <jar compress="true" destfile="lib/bundle/architectureviewer1.1.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/architectureviewer1.1.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package"
                    value="javax.swing, javax.swing.text,
org.ungoverned.gravity.servicebinder, org.ungoverned.gravity.servicebinder.architecture,
javax.accessibility, javax.swing.plaf, javax.swing.tree, javax.swing.undo,
javax.swing.event, javax.swing.border"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-NETADDR -->
    <target name="bundle-netaddr">
        <jar compress="false" destfile="${bundles.dest}/netaddr.jar"
            manifest="${src}/net/java/sip/communicator/impl/netaddr/netaddr.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/netaddr"
                prefix="net/java/sip/communicator/service/netaddr"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/netaddr"
                prefix="net/java/sip/communicator/impl/netaddr"/>
            <zipfileset src="${lib.noinst}/Stun4J.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-NETADDR-SLICK -->
    <target name="bundle-netaddr-slick">
        <jar compress="false" destfile="${bundles.dest}/netaddr-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/netaddr/netaddr.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/netaddr"
                prefix="net/java/sip/communicator/slick/netaddr"/>
        </jar>
    </target>

    <!--BUNDLE-SLICKLESS-->
    <target name="bundle-slickless">
        <!--internal-target- Runs all tests which do not belong to a service implementation and don't therefore need a running OSGI framework -->
        <jar compress="false" destfile="${bundles.dest}/slickless.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/slickless/slickless.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/slickless"
                prefix="net/java/sip/communicator/slick/slickless"/>
        </jar>
    </target>

    <!--BUNDLE-SLICK-RUNNER-->
    <target name="bundle-slick-runner">
        <!--internal-target- Creates a bundle that runs all SLICKs that currently exist in sip-com -->
        <jar compress="false" destfile="${bundles.dest}/slick-runner.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/runner/slick-runner.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/runner"
                prefix="net/java/sip/communicator/slick/runner"/>
        </jar>
    </target>

    <!--BUNDLE-SIP-->
    <target name="bundle-sip">
        <!--internal-target- Creates a bundle containing the sip implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-sip.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/sip/sip.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/sip"
                prefix="net/java/sip/communicator/impl/protocol/sip"/>
            <zipfileset src="${lib.noinst}/jain-sip-ri.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sip-api.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jain-sdp.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/concurrent.jar" prefix=""/>
        </jar>
    </target>

    <target name="bundle-sip-slick">
        <!--internal-target- Creates a bundle containing the all tests for the
            sip implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-sip-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/sip/sip.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/sip"
                prefix="net/java/sip/communicator/slick/protocol/sip"/>
        </jar>
    </target>

    <!-- BUNDLE-PROTOCOL -->
    <target name="bundle-protocol">
        <!-- Creates a bundle containing the protocol provider interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/protocol.jar"
            manifest="${src}/net/java/sip/communicator/service/protocol/protocol.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/protocol"
                prefix="net/java/sip/communicator/service/protocol"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol"
                    prefix="net/java/sip/communicator/impl/protocol">
                <depth max="0" />
                <type type="file" />
            </zipfileset>
            <zipfileset dir="${resources}/images"
                prefix="resources/images">
                <include name="protocol/icq/**/*"/>
                <include name="protocol/googletalk/**/*"/>
                <include name="protocol/facebook/**/*"/>
                <include name="protocol/jabber/**/*"/>
                <include name="protocol/msn/**/*"/>
                <include name="protocol/yahoo/**/*"/>
            </zipfileset>
        </jar>
    </target>

    <target name="bundle-smacklib">
        <!-- Creates a bundle containing the smack lib.-->
        <jar compress="false" destfile="${bundles.dest}/smacklib.jar"
            manifest="${lib.noinst}/smack.manifest.mf">
            <zipfileset src="${lib.noinst}/smack.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/smackx.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/smackx-jingle.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ -->
    <target name="bundle-icq">
        <!-- Creates a bundle containing the icq impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-icq.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/icq/icq.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/icq"
                prefix="net/java/sip/communicator/impl/protocol/icq"/>
            <zipfileset src="${lib.noinst}/joscar-client.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-common.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-protocol.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jsocks-klea.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ-SLICK -->
    <target name="bundle-icq-slick">
        <!-- Creates a bundle containing the slick for the ICQ protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-icq-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/icq/icq.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/icq"
                prefix="net/java/sip/communicator/slick/protocol/icq"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
            <zipfileset src="${lib.noinst}/joscar-client.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-common.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/joscar-protocol.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jsocks-klea.jar" prefix=""/>
        </jar>
    </target>

     <!--BUNDLE-MOCK-PROVIDER-->
    <target name="bundle-mock">
        <!--internal-target- Creates a bundle containing the mock implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-mock.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/mock/mock.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/mock"
                prefix="net/java/sip/communicator/impl/protocol/mock"/>
        </jar>
    </target>

    <!-- BUNDLE-JABBER -->
    <target name="bundle-jabber">
        <!-- Creates a bundle containing the jabber impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-jabber.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/jabber/jabber.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/jabber"
                prefix="net/java/sip/communicator/impl/protocol/jabber"/>
        </jar>
    </target>

    <!-- BUNDLE-JABBER-SLICK -->
    <!-- Creates a bundle containing the slick for the Jabber protocol provider.-->
    <target name="bundle-jabber-slick">

        <jar compress="false" destfile="${bundles.dest}/protocol-jabber-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/jabber/jabber.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/jabber"
                prefix="net/java/sip/communicator/slick/protocol/jabber"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-MSN -->
    <target name="bundle-msn">
        <!-- Creates a bundle containing the msn impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-msn.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/msn/msn.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/msn"
                prefix="net/java/sip/communicator/impl/protocol/msn"/>
            <zipfileset src="${lib.noinst}/jml-1.0b2.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-MSN-SLICK -->
    <!-- Creates a bundle containing the slick for the Msn protocol provider.-->
    <target name="bundle-msn-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-msn-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/msn/msn.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/msn"
                prefix="net/java/sip/communicator/slick/protocol/msn"/>
            <zipfileset src="${lib.noinst}/jml-1.0b2.jar" prefix=""/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-SSH -->
    <target name="bundle-ssh">
        <!-- Creates a bundle containing the SSH impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-ssh.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/ssh/ssh.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/ssh"
                prefix="net/java/sip/communicator/impl/protocol/ssh"/>
            <zipfileset src="${lib.noinst}/jsch-0.1.36.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SSHACCREGWIZZ -->
    <target name="bundle-plugin-sshaccregwizz">
        <!-- Creates a bundle for the plugin SSH Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/sshaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/sshaccregwizz/sshaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/sshaccregwizz"
                prefix="net/java/sip/communicator/plugin/sshaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-YAHOO -->
    <target name="bundle-yahoo">
        <!-- Creates a bundle containing the yahoo impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-yahoo.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/yahoo/yahoo.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/yahoo"
                prefix="net/java/sip/communicator/impl/protocol/yahoo"/>
            <zipfileset src="${lib.noinst}/ymsg_network_v0_67.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-YAHOO-SLICK -->
    <!-- Creates a bundle containing the slick for the Yahoo protocol provider.-->
    <target name="bundle-yahoo-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-yahoo-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/yahoo/yahoo.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/yahoo"
                prefix="net/java/sip/communicator/slick/protocol/yahoo"/>
            <zipfileset src="${lib.noinst}/ymsg_network_v0_67.jar" prefix=""/>
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/generic"
                prefix="net/java/sip/communicator/slick/protocol/generic"/>
        </jar>
    </target>

    <!-- BUNDLE-GIBBERISH -->
    <target name="bundle-gibberish">
        <!-- Creates a bundle containing the Gibberish impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-gibberish.jar"
             manifest="${src}/net/java/sip/communicator/impl/protocol/gibberish/gibberish.provider.manifest.mf">
        <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/gibberish"
                    prefix="net/java/sip/communicator/impl/protocol/gibberish"/>
        <!-- zipfileset src="${lib.noinst}/gibberish_stack.jar" prefix=""/-->
        </jar>
    </target>

    <!-- BUNDLE-GIBBERISH-SLICK -->
    <!-- Creates a bundle containing the slick for the Gibberish protocol
         provider.-->
    <target name="bundle-gibberish-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-gibberish-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/gibberish/gibberish.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/gibberish"
                prefix="net/java/sip/communicator/slick/protocol/gibberish"/>
        </jar>
    </target>

    <!-- BUNDLE-UI-SERVICE -->
    <target name="bundle-ui-service">
        <!-- Bundle sip-communicator's UI.-->
        <jar compress="false" destfile="${bundles.dest}/ui-service.jar"
            manifest="${src}/net/java/sip/communicator/service/gui/gui.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/gui"
                prefix="net/java/sip/communicator/service/gui"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/shutdown"
                prefix="net/java/sip/communicator/service/shutdown"/>
        </jar>
    </target>

    <!-- BUNDLE-SWING-UI -->
    <target name="bundle-swing-ui">
        <!-- Bundle sip-communicator's UI.-->
        <jar compress="false" destfile="${bundles.dest}/swing-ui.jar"
            manifest="${src}/net/java/sip/communicator/impl/gui/swing.ui.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/gui"
                prefix="net/java/sip/communicator/impl/gui"/>
            <zipfileset src="lib/installer-exclude/jna.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/transparency.jar" prefix=""/>
            <zipfileset src="lib/installer-exclude/swing-worker-1.2.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-CONTACTLIST -->
    <target name="bundle-contactlist">
        <!-- Creates a bundle containing the contactlist interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/contactlist.jar"
            manifest="${src}/net/java/sip/communicator/service/contactlist/contactlist.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/contactlist"
                prefix="net/java/sip/communicator/service/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-META-CONTACTLIST -->
    <target name="meta-contactlist">
        <!-- Creates the meta contact list bundle.-->
        <jar compress="false" destfile="${bundles.dest}/meta-cl.jar"
            manifest="${src}/net/java/sip/communicator/impl/contactlist/meta.cl.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/contactlist"
                prefix="net/java/sip/communicator/impl/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-META-CONTACTLIST-SLICK -->
    <target name="meta-contactlist-slick">
        <!-- Creates a bundle for the meta contact list SLICK.-->
        <jar compress="false" destfile="${bundles.dest}/meta-cl-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/contactlist/meta.cl.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/contactlist"
                prefix="net/java/sip/communicator/slick/contactlist"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ICQACCREGWIZZ -->
    <target name="bundle-plugin-icqaccregwizz">
        <!-- Creates a bundle for the plugin Icq Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/icqaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/icqaccregwizz/icqaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/icqaccregwizz"
                prefix="net/java/sip/communicator/plugin/icqaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-AIMACCREGWIZZ -->
    <target name="bundle-plugin-aimaccregwizz">
        <!-- Creates a bundle for the plugin Aim Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/aimaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/aimaccregwizz/aimaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/aimaccregwizz"
                prefix="net/java/sip/communicator/plugin/aimaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-JABBERACCREGWIZZ -->
    <target name="bundle-plugin-jabberaccregwizz">
        <!-- Creates a bundle for the plugin Jabber Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/jabberaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/jabberaccregwizz/jabberaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/jabberaccregwizz"
                prefix="net/java/sip/communicator/plugin/jabberaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-GOOGLETALKACCREGWIZZ -->
    <target name="bundle-plugin-googletalkaccregwizz">
        <!-- Creates a bundle for the plugin Google Talk Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/googletalkaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/googletalkaccregwizz/googletalkaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/googletalkaccregwizz"
                prefix="net/java/sip/communicator/plugin/googletalkaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-MSNACCREGWIZZ -->
    <target name="bundle-plugin-msnaccregwizz">
        <!-- Creates a bundle for the plugin Msn Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/msnaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/msnaccregwizz/msnaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/msnaccregwizz"
                prefix="net/java/sip/communicator/plugin/msnaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-YAHOOACCREGWIZZ -->
    <target name="bundle-plugin-yahooaccregwizz">
        <!-- Creates a bundle for the plugin Yahoo Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/yahooaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/yahooaccregwizz/yahooaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/yahooaccregwizz"
                prefix="net/java/sip/communicator/plugin/yahooaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-SIPACCREGWIZZ -->
    <target name="bundle-plugin-sipaccregwizz">
        <!-- Creates a bundle for the plugin SIP Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/sipaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/sipaccregwizz/sipaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/sipaccregwizz"
                prefix="net/java/sip/communicator/plugin/sipaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-IPTELACCREGWIZZ -->
    <target name="bundle-plugin-iptelaccregwizz">
        <!-- Creates a bundle for the plugin IP Tel Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/iptelaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/iptelaccregwizz/iptelaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/iptelaccregwizz"
                prefix="net/java/sip/communicator/plugin/iptelaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-GIBBERISHACCREGWIZZ -->
    <target name="bundle-plugin-gibberishaccregwizz">
        <!-- Creates a bundle for the plugin Gibberish Account Registration
             Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/gibberishaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/gibberishaccregwizz/gibberishaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/gibberishaccregwizz"
                prefix="net/java/sip/communicator/plugin/gibberishaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-FACEBOOKACCREGWIZZ -->
    <target name="bundle-plugin-facebookaccregwizz">
        <!-- Creates a bundle for the plugin Facebook Account Registration
             Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/facebookaccregwizz.jar"
                manifest="${src}/net/java/sip/communicator/plugin/facebookaccregwizz/facebookaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/facebookaccregwizz"
                    prefix="net/java/sip/communicator/plugin/facebookaccregwizz" />
        </jar>
    </target>

    <!-- BUNDLE-SERVICE-VERSION -->
    <target name="bundle-version">
        <!-- Creates a bundle for the version service.-->
        <jar compress="false" destfile="${bundles.dest}/version.jar"
            manifest="${src}/net/java/sip/communicator/service/version/version.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/version"
                prefix="net/java/sip/communicator/service/version"/>
        </jar>
    </target>

    <!-- BUNDLE-SERVICEIMPL-VERSION -->
    <target name="bundle-version-impl">
        <!-- Creates a bundle for the version service impl.-->
        <jar compress="false" destfile="${bundles.dest}/version-impl.jar"
            manifest="${src}/net/java/sip/communicator/impl/version/version.impl.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/version"
                prefix="net/java/sip/communicator/impl/version"/>
        </jar>
    </target>

    <!-- BUNDLE-SERVICELICK-VERSION -->
    <target name="bundle-version-slick">
        <!-- Creates a bundle for the version service slick.-->
        <jar compress="false" destfile="${bundles.dest}/version-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/version/version.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/version"
                prefix="net/java/sip/communicator/slick/version"/>
        </jar>
    </target>

    <!-- BUNDLE-SHUTDOWN-TIMEOUT -->
    <target name="bundle-shutdown-timeout">
        <!-- Creates a bundle for the shutdown-timeout plugin.-->
        <jar compress="false" destfile="${bundles.dest}/shutdown-timeout.jar"
            manifest="${src}/net/java/sip/communicator/impl/shutdowntimeout/shutdown.timeout.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/shutdowntimeout"
                prefix="net/java/sip/communicator/impl/shutdowntimeout"/>
        </jar>
    </target>

    <!--BUNDLE-GROWLNOTIFICATION-->
    <target name="bundle-growlnotification">
        <!-- Creates a bundle for the growlnotification plugin.-->
        <jar compress="false" destfile="${bundles.dest.mac}/growlnotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/growlnotification/growlnotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/growlnotification"
                prefix="net/java/sip/communicator/impl/growlnotification" />
        </jar>
    </target>

    <!--BUNDLE-SWINGNOTIFICATION-->
    <target name="bundle-swingnotification">
        <!-- Creates a bundle for the swingnotification plugin.-->
        <jar compress="false" destfile="${bundles.dest}/swingnotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/swingnotification/swingnotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/swingnotification"
                prefix="net/java/sip/communicator/impl/swingnotification" />
        </jar>
    </target>

    <!--BUNDLE-GALAGONOTIFICATION-->
    <target name="bundle-galagonotification">
        <!-- Creates a bundle for the galagonotification plugin. -->
        <jar compress="false" destfile="${bundles.dest.lin}/galagonotification.jar"
            manifest="${src}/net/java/sip/communicator/impl/galagonotification/galagonotification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/galagonotification"
                prefix="net/java/sip/communicator/impl/galagonotification" />
        </jar>
    </target>

    <!--BUNDLE-POPUPMESSAGEHANDLER-SLICK-->
    <target name="bundle-popupmessagehandler-slick">
        <jar compress="false" destfile="${bundles.dest}/popupmessagehandler-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/popupmessagehandler/popupmessagehandler.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/popupmessagehandler"
                prefix="net/java/sip/communicator/slick/popupmessagehandler"/>
        </jar>
    </target>

    <!--BUNDLE-SPARKLE-->
    <target name="bundle-sparkle">
        <!-- Creates a bundle for the sparkle activator plugin.-->
        <jar compress="false" destfile="${bundles.dest.mac}/sparkle.jar"
            manifest="${src}/net/java/sip/communicator/impl/sparkle/sparkle.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/sparkle"
                prefix="net/java/sip/communicator/impl/sparkle" />
        </jar>
    </target>

    <!--BUNDLE-AUDIO NOTIFIER-->
    <target name="bundle-audionotifier">
        <!-- Creates a bundle for the audio notifier service.-->
        <jar compress="false" destfile="${bundles.dest}/audionotifier.jar"
            manifest="${src}/net/java/sip/communicator/impl/audionotifier/audionotifier.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/audionotifier"
                            prefix="net/java/sip/communicator/service/audionotifier"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/audionotifier"
                prefix="net/java/sip/communicator/impl/audionotifier" />
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-EXAMPLE PLUGIN -->
        <target name="bundle-plugin-exampleplugin">
            <!-- Creates a bundle for the plugin SIP Account Registration Wizard.-->
            <jar compress="false" destfile="${bundles.dest}/exampleplugin.jar"
                manifest="${src}/net/java/sip/communicator/plugin/exampleplugin/exampleplugin.manifest.mf">
                <zipfileset dir="${dest}/net/java/sip/communicator/plugin/exampleplugin"
                    prefix="net/java/sip/communicator/plugin/exampleplugin"/>
            </jar>
        </target>

    <!-- BUNDLE-PLUGIN-BRANDING -->
        <target name="bundle-plugin-branding">
            <!-- Creates a bundle for the Splash Screen plugin.-->
        <jar compress="false" destfile="${bundles.dest}/branding.jar"
            manifest="${src}/net/java/sip/communicator/plugin/branding/branding.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/branding"
                prefix="net/java/sip/communicator/plugin/branding"/>
            </jar>
        </target>

    <!--BUNDLE-OSDEPENDENT-->
    <target name="bundle-osdependent">
        <!-- Creates a bundle for the OS dependent packages like systray and desktop."-->
        <jar
            compress="false" destfile="${bundles.dest}/osdependent.jar"
            manifest="${src}/net/java/sip/communicator/impl/osdependent/osdependent.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/systray"
                prefix="net/java/sip/communicator/service/systray"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/service/desktop"
                prefix="net/java/sip/communicator/service/desktop"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/osdependent"
                prefix="net/java/sip/communicator/impl/osdependent"/>
            <zipfileset src="${lib.mac.noinst}/dock.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-BROWSER LAUNCHER -->
    <target name="bundle-browserlauncher">
        <!-- Creates a bundle for the browser launcher.-->
        <jar compress="false" destfile="${bundles.dest}/browserlauncher.jar"
            manifest="${src}/net/java/sip/communicator/impl/browserlauncher/browserlauncher.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/browserlauncher"
                prefix="net/java/sip/communicator/service/browserlauncher"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/browserlauncher"
                prefix="net/java/sip/communicator/impl/browserlauncher"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN MANAGER -->
    <target name="bundle-pluginmanager">
        <!-- Creates a bundle for the plugin manager plugin.-->
        <jar compress="false" destfile="${bundles.dest}/pluginmanager.jar"
            manifest="${src}/net/java/sip/communicator/plugin/pluginmanager/pluginmanager.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/pluginmanager"
                prefix="net/java/sip/communicator/plugin/pluginmanager"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-EXTENDED CALL HISTORY SEARCH -->
    <target name="bundle-plugin-call-history-form">
        <!-- Creates a bundle for a extended callhistory search-->
        <jar compress="false" destfile="${bundles.dest}/callhistoryform.jar"
            manifest="${src}/net/java/sip/communicator/plugin/callhistoryform/callhistoryform.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/callhistoryform"
                prefix="net/java/sip/communicator/plugin/callhistoryform"/>
            <zipfileset src="${lib.noinst}/jcalendar-1.3.2.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-RSS -->
    <target name="bundle-rss">
        <!-- Creates a bundle containing the Rss impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-rss.jar"
             manifest="${src}/net/java/sip/communicator/impl/protocol/rss/rss.provider.manifest.mf">
        <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/rss"
                    prefix="net/java/sip/communicator/impl/protocol/rss"/>

        <!-- LIBRARIES FOR RSS PROTOCOL, INCLUDING JDOM-1.0 AND ROME-0.9/-->
        <zipfileset src="${lib.noinst}/jdom.jar" prefix=""/>
        <zipfileset src="${lib.noinst}/rome-0.9.jar" prefix=""/>

        <!-- LIBRARY FOR FAVICON SUPPORT -->
        <zipfileset src="${lib.noinst}/aclibico-2.1.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-RSS-SLICK -->
    <!-- Creates a bundle containing the slick for the Gibberish protocol
         provider.-->
    <target name="bundle-rss-slick">
        <jar compress="false" destfile="${bundles.dest}/protocol-rss-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/protocol/rss/rss.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/rss"
                prefix="net/java/sip/communicator/slick/protocol/rss"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-RSSACCREGWIZZ -->
    <target name="bundle-plugin-rssaccregwizz">
        <!-- Creates a bundle for the plugin Rss Account Registration
             Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/rssaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/rssaccregwizz/rssaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/rssaccregwizz"
                prefix="net/java/sip/communicator/plugin/rssaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-ZEROCONF -->
    <target name="bundle-zeroconf">
        <!-- Creates a bundle containing the Zeroconf impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-zeroconf.jar"
            manifest="${src}/net/java/sip/communicator/impl/protocol/zeroconf/zeroconf.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/zeroconf"
                prefix="net/java/sip/communicator/impl/protocol/zeroconf"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ZEROCONFACCREGWIZZ -->
    <target name="bundle-plugin-zeroconfaccregwizz">
        <!-- Creates a bundle for the plugin Zeroconf Account Registration Wizard.-->
        <jar compress="false" destfile="${bundles.dest}/zeroconfaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/zeroconfaccregwizz/zeroconfaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/zeroconfaccregwizz"
                prefix="net/java/sip/communicator/plugin/zeroconfaccregwizz"/>
        </jar>
    </target>

    <!-- BUNDLE-IRC -->
    <target name="bundle-irc">
        <!-- Creates a bundle containing the IRC impl of the protocol provider.-->
        <jar compress="false" destfile="${bundles.dest}/protocol-irc.jar"
         manifest="${src}/net/java/sip/communicator/impl/protocol/irc/irc.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/irc"
                        prefix="net/java/sip/communicator/impl/protocol/irc"/>
            <zipfileset src="${lib.noinst}/pircbot.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-IRCACCREGWIZZ -->
    <target name="bundle-plugin-ircaccregwizz">
            <!-- Creates a bundle for the plugin IRC Account Registration
                 Wizard.-->
            <jar compress="false" destfile="${bundles.dest}/ircaccregwizz.jar"
                manifest="${src}/net/java/sip/communicator/plugin/ircaccregwizz/ircaccregwizz.manifest.mf">
                <zipfileset dir="${dest}/net/java/sip/communicator/plugin/ircaccregwizz"
                    prefix="net/java/sip/communicator/plugin/ircaccregwizz"/>
            </jar>
    </target>

    <!--BUNDLE-LOG4J -->
    <target name="bundle-log4j">
        <jar compress="true" destfile="lib/bundle/log4j.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/log4j-1.2.8.jar" prefix=""/>
            <manifest>
                <attribute name="Export-Package" value="org.apache.log4j"/>
                <attribute name="Bundle-Name" value="Apache log4j logging system"/>
                <attribute name="Bundle-Description" value="Logging system."/>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-COMMONS-LOGGING -->
    <target name="bundle-commons-logging">
        <jar compress="true" destfile="lib/bundle/commons-logging.jar"
                filesetmanifest="merge">
            <zipfileset src="${lib.noinst}/commons-logging-1.1.1.jar"
                prefix=""/>
            <manifest>
                <attribute name="Export-Package"
                    value="org.apache.commons.logging"/>
                <attribute name="Bundle-Name"
                    value="Apache Commons Logging"/>
                <attribute name="Bundle-Description"
                    value="An ultra-thin bridge between different logging implementations."/>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-HTTPCORE -->
    <target name="bundle-httpcore">
        <jar compress="true" destfile="lib/bundle/httpcore.jar"
                filesetmanifest="merge">
            <zipfileset src="${lib.noinst}/httpcore-4.0.1.jar" prefix=""/>
            <manifest>
                <attribute name="Export-Package"
                    value="org.apache.http,
org.apache.http.entity,
org.apache.http.impl,
org.apache.http.impl.entity,
org.apache.http.impl.io,
org.apache.http.io,
org.apache.http.message,
org.apache.http.params,
org.apache.http.protocol,
org.apache.http.util"/>
                <attribute name="Import-Package"
                    value="org.apache.commons.logging"/>
                <attribute name="Bundle-Name"
                    value="Apache HttpComponents Core"/>
                <attribute name="Bundle-Description"
                    value="A set of low level HTTP transport components."/>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-MAILBOX-->
    <target name="bundle-mailbox">
        <jar compress="false" destfile="${bundles.dest}/mailbox.jar"
            manifest="${src}/net/java/sip/communicator/plugin/mailbox/mailbox.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/mailbox"
                    prefix="net/java/sip/communicator/plugin/mailbox" />
        </jar>
    </target>

    <!-- BUNDLE-NOTIFICATION -->
    <target name="bundle-notification">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notification.jar"
            manifest="${src}/net/java/sip/communicator/impl/notification/notification.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/notification"
                prefix="net/java/sip/communicator/service/notification"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/notification"
                prefix="net/java/sip/communicator/impl/notification"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-WHITEBOARD -->
    <target name="bundle-plugin-whiteboard">
    <!-- Creates a bundle for the Whiteboard plugin.-->
        <jar compress="false" destfile="${bundles.dest}/whiteboard.jar"
            manifest="${src}/net/java/sip/communicator/plugin/whiteboard/whiteboard.manifest.mf">
                   <zipfileset dir="${dest}/net/java/sip/communicator/plugin/whiteboard"
                       prefix="net/java/sip/communicator/plugin/whiteboard"/>
       </jar>
   </target>

    <!-- BUNDLE-CONTACT-EVENT-HANDLER -->
    <target name="bundle-contacteventhandler">
    <!-- Creates a bundle for the ContactEventHandler service.-->
        <jar compress="false" destfile="${bundles.dest}/contacteventhandler.jar"
           manifest="${src}/net/java/sip/communicator/service/contacteventhandler/contact.event.handler.manifest.mf">
           <zipfileset dir="${dest}/net/java/sip/communicator/service/contacteventhandler"
               prefix="net/java/sip/communicator/service/contacteventhandler"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-CONTACTINFO -->
    <target name="bundle-plugin-contactinfo">
        <!-- Creates a bundle for the plugin Contact Info.-->
        <jar compress="false" destfile="${bundles.dest}/contactinfo.jar"
            manifest="${src}/net/java/sip/communicator/plugin/contactinfo/contactinfo.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/contactinfo"
                prefix="net/java/sip/communicator/plugin/contactinfo"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-CHATALERTER -->
    <target name="bundle-plugin-chatalerter">
        <!-- Creates a bundle for the plugin Chat Alerter.-->
        <jar compress="false" destfile="${bundles.dest}/chatalerter.jar"
            manifest="${src}/net/java/sip/communicator/plugin/chatalerter/chatalerter.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/chatalerter"
                prefix="net/java/sip/communicator/plugin/chatalerter"/>
            <zipfileset src="${lib.noinst}/jdic_misc.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-ACCOUNTINFO -->
    <target name="bundle-plugin-accountinfo">
        <jar compress="false" destfile="${bundles.dest}/accountinfo.jar"
            manifest="${src}/net/java/sip/communicator/plugin/accountinfo/accountinfo.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/accountinfo"
                prefix="net/java/sip/communicator/plugin/accountinfo"/>
        </jar>
    </target>

    <!-- BUNDLE-DICT -->
    <target name="bundle-dict">
        <jar compress="false" destfile="${bundles.dest}/protocol-dict.jar"
             manifest="${src}/net/java/sip/communicator/impl/protocol/dict/dict.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/dict"
                    prefix="net/java/sip/communicator/impl/protocol/dict"/>
            <zipfileset src="${lib.noinst}/dict4j.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-DICTACCREGWIZZ -->
    <target name="bundle-plugin-dictaccregwizz">
        <!-- Creates a bundle for the plugin Dict Account Registration
             Wizard.-->
       <jar compress="false" destfile="${bundles.dest}/dictaccregwizz.jar"
            manifest="${src}/net/java/sip/communicator/plugin/dictaccregwizz/dictaccregwizz.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/dictaccregwizz"
                prefix="net/java/sip/communicator/plugin/dictaccregwizz"/>
        </jar>
    </target>

    <!--BUNDLE-UpdateCheckPlugin-->
    <target name="bundle-updatecheckplugin">
        <jar compress="false" destfile="${bundles.dest}/updatechecker.jar"
            manifest="${src}/net/java/sip/communicator/plugin/updatechecker/updatecheck.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/updatechecker"
                prefix="net/java/sip/communicator/plugin/updatechecker" />
        </jar>
    </target>

    <!--BUNDLE-AutoAwayPlugin-->
    <target name="bundle-plugin-autoaway">
        <jar compress="false" destfile="${bundles.dest}/autoaway.jar"
            manifest="${src}/net/java/sip/communicator/plugin/autoaway/autoaway.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/autoaway"
                prefix="net/java/sip/communicator/plugin/autoaway" />
        </jar>
    </target>

   <!--BUNDLE-PLUGIN-PROFILER-->
   <target name="bundle-plugin-profiler4j">
        <jar compress="false" destfile="${bundles.dest}/profiler4j.jar"
            manifest="${src}/net/java/sip/communicator/plugin/profiler4j/profiler4j.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/profiler4j"
                prefix="net/java/sip/communicator/plugin/profiler4j" />
            <zipfileset src="${lib.noinst}/profiler4j-1.0-beta3-SC.jar"
                prefix=""/>
            <zipfileset src="${lib.noinst}/jdom.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jcommon-1.0.0.jar" prefix=""/>
            <zipfileset src="${lib.noinst}/jfreechart-1.0.1.jar" prefix=""/>
            <fileset file="${lib.noinst}/p4j-exclusions.txt"/>
        </jar>
    </target>

    <!--BUNDLE-SimpleAccRegPlugin-->
    <target name="bundle-plugin-simpleaccreg">
        <jar compress="false" destfile="${bundles.dest}/simpleaccreg.jar"
            manifest="${src}/net/java/sip/communicator/plugin/simpleaccreg/simpleaccreg.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/simpleaccreg"
                prefix="net/java/sip/communicator/plugin/simpleaccreg" />
        </jar>
    </target>

    <!--BUNDLE-General Config-->
    <target name="bundle-plugin-generalconfig">
        <jar compress="false" destfile="${bundles.dest}/generalconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/generalconfig/generalconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/generalconfig"
                prefix="net/java/sip/communicator/plugin/generalconfig" />
            <zipfileset src="${lib.noinst}/izpack-shortcut-link.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-Keybindings-->
    <target name="bundle-keybindings">
        <jar compress="false" destfile="${bundles.dest}/keybindings.jar"
            manifest="${src}/net/java/sip/communicator/impl/keybindings/keybindings.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/keybindings"
                prefix="net/java/sip/communicator/service/keybindings"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/keybindings"
                prefix="net/java/sip/communicator/impl/keybindings"/>
            <zipfileset dir="${resources}/config/defaultkeybindings"
                prefix="resources/config/defaultkeybindings"/>
            <zipfileset src="${lib.noinst}/KeybindingUtil.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-PLUGIN-KeybindingChooser-->
    <target name="bundle-plugin-keybindingChooser">
        <jar compress="false" destfile="${bundles.dest}/keybindingChooser.jar"
            manifest="${src}/net/java/sip/communicator/plugin/keybindingchooser/keybindingChooser.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/keybindingchooser"
                prefix="net/java/sip/communicator/plugin/keybindingchooser"/>
            <zipfileset dir="${resources}/images/plugin/keybindingchooser"
                prefix="resources/images/plugin/keybindingchooser"/>
            <zipfileset src="${lib.noinst}/KeybindingUtil.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-DEFAULT-RESOURCES-->
    <target name="bundle-resources-defaultpack">
        <!-- Copy the default resources to english one, as our defualt
            language is English and without the resource we cannot excplictly set it.-->
        <copy file="${sc.basedir}/resources/languages/resources.properties"
              tofile="${resources}/languages/resources_en.properties"/>
        <!-- Creates a bundle for the default resource pack."-->
        <jar
            compress="false" destfile="${bundles.dest}/defaultresources.jar"
            manifest="${src}/net/java/sip/communicator/plugin/defaultresourcepack/defaultresourcepack.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/defaultresourcepack"
                    prefix="net/java/sip/communicator/plugin/defaultresourcepack"/>

            <zipfileset dir="${resources}/colors"
                    prefix="resources/colors"/>
            <zipfileset dir="${resources}/config"
                    prefix="resources/config"/>
            <zipfileset dir="${resources}/images"
                    prefix="resources/images" excludes="**/*.svg"/>
            <zipfileset dir="${resources}/languages"
                    prefix="resources/languages"/>
            <zipfileset dir="${resources}/sounds"
                    prefix="resources/sounds"/>
            <zipfileset dir="${resources}/styles"
                    prefix="resources/styles"/>
        </jar>
    </target>

     <!--BUNDLE-RESOURCE-MANAGER-->
    <target name="bundle-resource-manager">
        <!-- Creates a bundle for the Resource Management Service Impl."-->
        <jar
            compress="false" destfile="${bundles.dest}/resourcemanager.jar"
            manifest="${src}/net/java/sip/communicator/impl/resources/resourcemanagement.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/resources"
                prefix="net/java/sip/communicator/service/resources"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/resources"
                prefix="net/java/sip/communicator/impl/resources"/>
        </jar>
    </target>

    <!-- BUNDLE-NOTIFICATION-CONFIG -->
    <target name="bundle-notification-config">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/notificationconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/notificationconfiguration/notificationconfiguration.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/notificationconfiguration"
                prefix="net/java/sip/communicator/plugin/notificationconfiguration"/>
        </jar>
    </target>

    <!-- BUNDLE-JFontChooser -->
    <target name="bundle-jfontchooserlib">
        <!-- Creates a bundle containing the jfontchooser lib.-->
        <jar compress="false" destfile="${bundles.dest}/jfontchooserlib.jar"
            manifest="${lib.noinst}/jfontchooser.manifest.mf">
            <zipfileset src="${lib.noinst}/jfontchooser-1.0.5.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE Arg Delegation Service -->
    <target name="bundle-argdelegation-service">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/argdelegation-service.jar"
            manifest="${src}/net/java/sip/communicator/service/argdelegation/argdelegation.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/argdelegation/"
                prefix="net/java/sip/communicator/service/argdelegation"/>
        </jar>
    </target>

    <!-- BUNDLE Arg Delegation Implementation-->
    <target name="bundle-argdelegation">
        <!-- Creates a bundle for the notifications.-->
        <jar compress="false" destfile="${bundles.dest}/argdelegation.jar"
            manifest="${src}/net/java/sip/communicator/impl/argdelegation/argdelegation.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/argdelegation/"
                prefix="net/java/sip/communicator/impl/argdelegation/"/>
        </jar>
    </target>

    <!--BUNDLE-ZRTP4J -->
    <target name="bundle-zrtp4j">
        <jar compress="true" destfile="${bundles.dest}/zrtp4j.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib.noinst}/zrtp4j-light.jar" prefix=""/>
            <manifest>
                <attribute name="Export-Package" value="
                    gnu.java.zrtp,
                    gnu.java.zrtp.packets,
                    gnu.java.zrtp.utils,
                    gnu.java.zrtp.zidfile"/>
                <attribute name="Import-Package" value="org.bouncycastle.crypto,
                    org.bouncycastle.crypto.digests,
                    org.bouncycastle.crypto.macs,
                    org.bouncycastle.crypto.params,
                	org.bouncycastle.crypto.prng,
                    org.bouncycastle.crypto.engines,
                    org.bouncycastle.crypto.modes"/>
                <attribute name="Bundle-Name" value="ZRTP4J"/>
                <attribute name="Bundle-Description" value="ZRTP for Java library."/>
                <attribute name="Bundle-Version" value="1.4.5"/>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-FILEHISTORY-->
    <target name="bundle-filehistory">
        <jar compress="false" destfile="${bundles.dest}/filehistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/filehistory/filehistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/filehistory"
                prefix="net/java/sip/communicator/service/filehistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/filehistory"
                prefix="net/java/sip/communicator/impl/filehistory" />
        </jar>
    </target>
    <!--BUNDLE-METAHISTORY-->
    <target name="bundle-metahistory">
        <jar compress="false" destfile="${bundles.dest}/metahistory.jar"
            manifest="${src}/net/java/sip/communicator/impl/metahistory/metahistory.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/metahistory"
                prefix="net/java/sip/communicator/service/metahistory"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/metahistory"
                prefix="net/java/sip/communicator/impl/metahistory" />
        </jar>
    </target>
    <!--BUNDLE-BOUNCYCASTLE -->
    <target name="bundle-bouncycastle">
        <jar compress="true" destfile="${bundles.dest}/bouncycastle.jar">
            <zipfileset src="${lib.noinst}/lcrypto-jdk16-143.jar"/>
            <manifest>
                <attribute name="Export-Package" value="org.bouncycastle.crypto,
                    org.bouncycastle.crypto.digests,
                    org.bouncycastle.crypto.macs,
                    org.bouncycastle.crypto.params,
                	org.bouncycastle.crypto.prng,
                    org.bouncycastle.crypto.engines,
                    org.bouncycastle.crypto.modes,
                    org.bouncycastle.crypto.generators,
                    org.bouncycastle.crypto.signers,
                    org.bouncycastle.util.encoders,
                    org.bouncycastle.util"/>
                <attribute name="Bundle-Name" value="BouncyCastle"/>
                <attribute name="Bundle-Version" value="1.4.3.1"/>
                <attribute name="System-Bundle" value="yes"/>
            </manifest>
        </jar>
    </target>
    <!--BUNDLE-PLUGIN-OTR -->
    <target name="bundle-plugin-otr">
        <jar compress="false" destfile="${bundles.dest}/otr.jar" manifest="${src}/net/java/sip/communicator/plugin/otr/otr.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/otr"
                prefix="net/java/sip/communicator/plugin/otr"/>
            <zipfileset src="${lib.noinst}/otr4j.jar"/>
        </jar>
    </target>
    <!--BUNDLE-METAHISTORY-SLICK-->
    <target name="bundle-metahistory-slick">
        <jar compress="false" destfile="${bundles.dest}/metahistory-slick.jar"
            manifest="${testsrc}/net/java/sip/communicator/slick/metahistory/metahistory.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/metahistory"
                prefix="net/java/sip/communicator/slick/metahistory"/>
        </jar>
    </target>

	<!-- BUNDLE-PLUGIN-GLOBALPROXYCONFIG -->
    <target name="bundle-plugin-globalproxyconfig">
        <!-- Creates a bundle for the global proxy configuration plugin.-->
        <jar compress="false" destfile="${bundles.dest}/globalproxyconfig.jar"
            manifest="${src}/net/java/sip/communicator/plugin/globalproxyconfig/globalproxyconfig.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/globalproxyconfig"
                prefix="net/java/sip/communicator/plugin/globalproxyconfig"/>
        </jar>
    </target>

    <!-- BUNDLE-PROTOCOL -->
    <target name="bundle-contactsource">
        <!-- Creates a bundle containing the contact source interfaces.-->
        <jar compress="false" destfile="${bundles.dest}/contactsource.jar"
            manifest="${src}/net/java/sip/communicator/service/contactsource/contactsource.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/contactsource"
                prefix="net/java/sip/communicator/service/contactsource"/>
        </jar>
    </target>

    <!-- BUNDLE-PLUGIN-RECONNECT -->
    <target name="bundle-plugin-reconnect">
        <!-- Creates a bundle for the reconnect plugin.-->
        <jar compress="false" destfile="${bundles.dest}/reconnectplugin.jar"
            manifest="${src}/net/java/sip/communicator/plugin/reconnectplugin/reconnectplugin.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/plugin/reconnectplugin"
                prefix="net/java/sip/communicator/plugin/reconnectplugin"/>
        </jar>
    </target>
</project>
