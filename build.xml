<?xml version="1.0" encoding="UTF-8"?>
<!-- Created by Emil Ivov on Jul 6, 2005 8:30:22 PM-->

<project basedir="." default="usage" name="sip-communicator-1.0">

    <property environment="system"/>
    <property name="jdk.home" value="/usr/java/java"/>
    <property name="dest" value="classes"/>
    <property name="bundles.dest" value="sc-bundles"/>
    <property name="doc" value="doc"/>
    <property name="java.doc" value="${doc}/api"/>
    <property name="lib" value="lib"/>
    <property name="native.libs" value="lib/native"/>
    <property name="src" value="src"/>
    <property name="src2" value="test"/>
    <property name="testsrc" value="${src2}"/>
    <property name="home" value="${system.HOME}"/>
    <property name="bin" value="sip-communicator.bin"/>
    <property name="utest.bin" value="sip-communicator.utest.bin"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="test.html.reports.dir" value="${test.reports.dir}/html"/>

    <!-- load properties needed for running the automated tests (e.g. test.list)-->
    <property file="lib/testing.properties"/>

    <!-- The following file contains a list of protocol account initialization
         properties, such as SIP server addresses and usernames, ICQ uin-s and
         passwords, AIM screennames and etc. The file should not be committed
         to CVS or shared among developers since that could lead to multiple
         login problems and cause testing to fail. You could create the file
         yourself using the lib/account.properties.template and setting all
         fields as indicated. -->
    <property file="lib/accounts.properties"/>

    <!-- windows  -->
    <condition property="jmf.home" value="${lib}/jmf-win">
        <os family="windows"/>
    </condition>
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>
    <!-- linux -->
    <condition property="jmf.home" value="${lib}/jmf-lin">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux" casesensitive="false" trim="true"/>
    </condition>
    <!-- solaris -->
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>
    <condition property="is.running.solaris" value="${os.name}">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>
    <condition property="jmf.home" value="${lib}/jmf-sol">
        <equals arg1="${os.name}" arg2="solaris" casesensitive="false" trim="true"/>
    </condition>
    <condition property="jmf.home" value="${lib}/jmf-sol">
        <equals arg1="${os.name}" arg2="SunOS" casesensitive="false" trim="true"/>
    </condition>


    <property name="jmf.home" value="${lib}/jmf-all"/>
    <condition property="jmf.performancepack.available" value="true">
        <not>
            <equals arg1="${jmf.home}" arg2="${lib}/jmf-all"
                casesensitive="false" trim="true"/>
        </not>
    </condition>
    <!-- end jmf.home-->

    <path id="project.source.path">
        <!-- refer to both main and test source files. -->
        <pathelement location="${src}"/>
        <pathelement location="${src2}"/>
    </path>

    <path id="project.class.path">
        <pathelement location="${dest}"/>

        <!-- Include all JAR files found in lib and any of its subdirectories. -->
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

  <!-- default Ant target does nothing except print helpful options -->
  <!-- Ant-internal target does not appear in its own help display  -->
    <target name="usage" >
       <echo message="execute 'ant -projecthelp' for useful build targets" />
       <echo message="execute 'ant rebuild' for a clean/build/test sequence" />
       <echo message="execute 'ant cc-buildloop' for a cruise control build cycle" />
       <echo message="execute 'ant -help' for Ant help" />
    </target>

    <!-- java compile -->
    <target name="compile" depends="init">
        <!--internal-target- compiles the entire project source tree -->
        <javac classpathref="project.class.path" debug="true"
            deprecation="true" destdir="${dest}" nowarn="false"
            source="1.4" target="1.4">
            <src path="${src}"/>
            <src path="${src2}"/>
        </javac>
    </target>

    <!-- clean -->
    <target name="clean"
        description="Remove all generated files and prepare for a clean restart.">
        <delete file="${bundles.dest}/configuration.jar"/>
        <delete file="${bundles.dest}/configuration-slick.jar"/>
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
            <fileset dir="${bundles.dest}"/>
            <fileset dir="${bin}"/>
            <fileset dir="${utest.bin}"/>
            <fileset dir="${native.libs}"/>
            <fileset dir="${java.doc}"/>
            <fileset dir="${test.reports.dir}"/>
        </delete>
    </target>

    <!-- resource -->
    <target name="resource">
        <!--internal-target- Copies all resource file to the ${dest} dir -->
        <copy todir="${dest}">
            <fileset dir="${src}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
            <fileset dir="${src2}">
                <include name="**/*.jpeg"/>
                <include name="**/*.wav"/>
                <include name="**/*.au"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- JAVADOC -->
    <target name="javadoc"
      description="Generates project javadoc.">
        <javadoc author="true" destdir="${java.doc}" package="true"
            version="true" use="true" windowtitle="SIP Communicator API"
            classpathref="project.class.path" source="1.4+">
            <fileset dir="${src}"/>
            <tag name="todo" description="To do:"/>
        </javadoc>
    </target>

    <!--PACKAGE-->
    <!--internal-target- Copy resource files. -->
    <target name="package" depends="resource"/>


    <!--MAKE-->
    <target name="make" depends="compile,package"
        description="Compile and package the project (incrementally)."/>

    <!--REBUILD-->
    <target name="rebuild" depends="clean,make"
        description="Clean,re-compile and package the project (no bundles or tests)."/>

    <!--INIT-->
    <target name="init">
        <mkdir dir="${dest}"/>
        <mkdir dir="${doc}"/>
        <mkdir dir="${java.doc}"/>
        <mkdir dir="${bundles.dest}"/>
        <mkdir dir="${test.reports.dir}"/>

        <!-- set the jmf.performancepack.extracted property so that we know
             whether we'll have to extract jmf native libs -->
        <condition property="jmf.performancepack.extracted">
            <available file="${native.libs}"/>
        </condition>

        <ant target="extractnativejmf"/>

    </target>

    <target name="extractnativejmf"
           if="jmf.performancepack.available"
           unless="jmf.performancepack.extracted">
        <!--internal-target- Verifies whether we have a jmf performance
            pack for the current operating system and extracts it in the
            lib/native directory -->
        <echo>
            Extracting ${os.name} performance pack native libs
            from: ${jmf.home}/jmf-native.jar
            to:${native.libs}
        </echo>
        <unjar dest="${native.libs}" overwrite="true" >
            <fileset dir="${jmf.home}">
                <include name="jmf-native.jar"/>
            </fileset>
        </unjar>
    </target>

    <!-- - - - - - - - - - - - - - UNIT TESTING - - - - - - - - - - - - - - -->

    <!--PREPARE-TESTS-->
    <target name="identify-test" depends="make">
        <!--internal-target- identify Service Impl Compatibility Kits to run -->
        <condition property="test.name.known">
            <!-- has a single test class has been defined?    -->
            <!-- e.g. ant test -Dtest.name=./path/to/test/testname.java    -->
            <isset property="test.name"/>
        </condition>
    </target>

    <target name="prepare-single-test" depends="identify-test"
            if="test.name.known">
        <!--internal-target- prepare to run a single Service Impl Compatibility Kit -->
        <!-- extract the simple Test class name. -->
        <basename property="simple.test.names"
                file="${test.name}" suffix=".java"/>
    </target>

    <!--internal-target- prepare to run all known Service Impl Compatibility Kit -->
    <!-- assign all known Test classes. -->
    <target name="prepare-all-tests" depends="identify-test"
            unless="test.name.known"
            description="prepares to run all known Service Impl Compatibility Kits">
        <!-- load Test classes from a test conf file. -->
        <!-- this would set the "simple.test.names" property -->
        <property name="simple.test.names" value="${test.list}"/>
    </target>

    <!--RUN-TESTS-->
    <target name="test" depends="init,prepare-single-test,prepare-all-tests"
        description="Starts oscar and runs selected Service Impl Compatibility Kits.">

        <!-- Do the testing itself. Note that we don't fail on error as we need
             to generate an html report before leaving this target.-->
        <java classname="org.ungoverned.oscar.Main"
            fork="true"
            failonerror="false"
            resultproperty="test.result.code"
            classpathref="project.class.path">

            <!-- The following two configure oscar telling it that it's running
                 as a test environment-->
            <sysproperty key="oscar.config.properties"
                value="file:./lib/oscar.unit.test.properties"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                value="${test.reports.dir}"/>

            <!-- Tell the slick runner about TestSutes we've preregistered. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.TEST_LIST"
                value="${simple.test.names}"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="lib/logging.properties"/>

            <!-- Tell all protocol testers their account details. -->
            <syspropertyset id="accounts">
              <propertyref prefix="accounts"/>
            </syspropertyset>
        </java>

        <!-- Generate the html report.
             Run it quietly (i.e. redirect the output) because we don't won't to
             see its "Build Successful" output line as users might confuse it
             for a general build success while this might not be the case.-->
        <echo message="Generating HTML test reports ..."/>
        <exec executable="ant" output="${test.html.reports.dir}/output.txt">
            <env key="CLASSPATH"
                 path="${java.class.path}:lib/xalan-2.6.0.jar.ant"/>
            <arg value="htmlreport"/>
        </exec>
        <echo message="Done."/>

        <!-- Check whether testing went alright and fail if not.-->
        <condition property="testing.failed">
          <not>
            <equals arg1="0"
            arg2="${test.result.code}"
            casesensitive="false" trim="true"/>
          </not>
        </condition>
        <fail if="testing.failed"/>
    </target>

    <!-- We use this target from within the test target in order to generate
         a human readable test report. We do not directly use the htmlreport
         target because we  need to include xalan in the classpath before we
         do.-->
    <target name="htmlreport">
      <junitreport todir="${test.reports.dir}">
        <fileset dir="${test.reports.dir}">
          <include name="SC-TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${test.html.reports.dir}"/>
      </junitreport>
    </target>

    <!--RUN-SIP-CMMUNICATOR-->
    <target name="run" depends="compile,resource"
        description="Starts oscar and runs sip-comunicator gui.">

        <java classname="org.ungoverned.oscar.Main"
            fork="true"
            failonerror="true"
            classpathref="project.class.path">

            <!-- Tell oscar to run sip-communicator-->
            <sysproperty key="oscar.config.properties"
                value="file:./lib/oscar.client.run.properties"/>

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="lib/logging.properties"/>

        </java>
    </target>

    <!--CRUISE CONTROL BUILD LOOP target-->
    <target name="cc-buildloop" depends="rebuild,bundles,test"
            description="Comprehensive rebuild and test (used by Cruise Control)."/>


    <!-- - - NetBeans Targets for specific files selected via ide-actions - -->

    <!--netbeans only - debug a single test file under oscar and jUnit-->
    <target name="debug-selected-file"
            depends="init,prepare-single-test,prepare-all-tests">
        <!--internal-target- starts oscar and debugs the selected
                             Service Impl Compatibility Kit -->

      <fail unless="test.name"
            message="debug impossible when 'test.name' property not defined!" />

        <nbjpdastart name="${test.name}"
                     addressproperty="jpda.address"
                     transport="dt_socket" >
            <classpath refid="project.class.path" />
            <sourcepath refid="project.source.path" />
        </nbjpdastart>

        <java fork="true"
              classname="org.ungoverned.oscar.Main"
              classpathref="project.class.path"
              failonerror="true" >
           <jvmarg value="-Xdebug"/>
           <jvmarg value="-Xnoagent"/>
           <jvmarg value="-Djava.compiler=none"/>
           <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
           <arg value="${test.name}"/>

            <!-- The following two configure oscar telling it that it's running
                 as a test environment-->
            <sysproperty key="oscar.config.properties"
                value="file:./lib/oscar.unit.test.properties"/>

            <!-- Tell the slick runner where to store test results. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.OUTPUT_DIR"
                value="${test.reports.dir}"/>

            <!-- Tell the slick runner which Test class to run. -->
            <sysproperty key="net.java.sip.communicator.slick.runner.TEST_LIST"
                value="${simple.test.names}"/>

            <!-- Tell the slick runner which Test class to run.
            <sysproperty key="net.java.sip.communicator.slick.runner.TEST_LIST"
                value="SlicklessTests"/> -->

            <!-- Tell java.util.logging about our logging preferences -->
            <sysproperty key="java.util.logging.config.file"
                value="lib/logging.properties"/>

        </java>
    </target>


    <!-- - - - - - - - - - - - - - BUNDLE BUILDING TARGETS - - - - - - - -  - -->
    <!--ALL BUNDLES-->
    <target name="bundles"
        depends="bundle-util,bundle-configuration,bundle-history,
        bundle-history-slick,bundle-configuration-slick,bundle-netaddr,
        bundle-netaddr-slick,bundle-slickless,bundle-slick-runner,bundle-sip,
        bundle-fileaccess,bundle-fileaccess-slick,bundle-media,
        bundle-media-slick,bundle-icq,bundle-icq-slick"/>

    <!--BUNDLE-HISTORY-->
    <target name="bundle-history" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/history.jar"
            manifest="src/net/java/sip/communicator/impl/history/history.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/history"
                prefix="net/java/sip/communicator/service/history"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/history"
                prefix="net/java/sip/communicator/impl/history" />
        </jar>
    </target>

    <!--BUNDLE-HISTORY-SLICK-->
    <target name="bundle-history-slick" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/history-slick.jar"
            manifest="test/net/java/sip/communicator/slick/history/history.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/history"
                prefix="net/java/sip/communicator/slick/history"/>
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-->
    <target name="bundle-fileaccess" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/fileaccess.jar"
            manifest="src/net/java/sip/communicator/impl/fileaccess/fileaccess.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/fileaccess"
                prefix="net/java/sip/communicator/service/fileaccess"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/fileaccess"
                prefix="net/java/sip/communicator/impl/fileaccess" />
        </jar>
    </target>

    <!--BUNDLE-FILEACCESS-SLICK-->
    <target name="bundle-fileaccess-slick" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/fileaccess-slick.jar"
            manifest="test/net/java/sip/communicator/slick/fileaccess/fileaccess.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/fileaccess"
                prefix="net/java/sip/communicator/slick/fileaccess"/>
        </jar>
    </target>

    <!--BUNDLE-UTIL-->
    <target name="bundle-util" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/util.jar"
            manifest="src/net/java/sip/communicator/util/util.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/util"
                prefix="net/java/sip/communicator/util"/>
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-->
    <target name="bundle-configuration" depends="rebuild">
        <jar
            compress="false"
            destfile="${bundles.dest}/configuration.jar"
            manifest="src/net/java/sip/communicator/impl/configuration/configuration.manifest.mf" >

            <zipfileset dir="${dest}/net/java/sip/communicator/service/configuration"
                prefix="net/java/sip/communicator/service/configuration"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/configuration"
                prefix="net/java/sip/communicator/impl/configuration" />
        </jar>
    </target>

    <!--BUNDLE-CONFIGURATION-SLICK-->
    <target name="bundle-configuration-slick" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/configuration-slick.jar"
            manifest="test/net/java/sip/communicator/slick/configuration/configuration.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/configuration"
                prefix="net/java/sip/communicator/slick/configuration"/>
        </jar>
    </target>

    <!--BUNDLE-JUNIT -->
    <target name="bundle-junit">
        <jar compress="true" destfile="lib/bundle/junit.jar"
            manifest="test/junit/junit.manifest.mf">
            <zipfileset src="${lib}/junit.jar" prefix=""/>
        </jar>
    </target>

    <!--BUNDLE-MEDIA-->
    <target name="bundle-media" depends="rebuild">
        <jar
            compress="false" destfile="${bundles.dest}/media.jar"
            manifest="src/net/java/sip/communicator/impl/media/media.manifest.mf">

            <zipfileset dir="${dest}/net/java/sip/communicator/service/media"
                prefix="net/java/sip/communicator/service/media"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/media"
                prefix="net/java/sip/communicator/impl/media"/>
        </jar>
    </target>

    <!--BUNDLE-MEDIA-SLICK-->
    <target name="bundle-media-slick" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/media-slick.jar"
            manifest="test/net/java/sip/communicator/slick/media/media.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/media"
                prefix="net/java/sip/communicator/slick/media"/>
        </jar>
    </target>

    <!--BUNDLE-SERVICEBINDER -->
    <target name="bundle-servicebinder">
        <jar compress="true" destfile="lib/bundle/servicebinder.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib}/servicebinder.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package" value="org.osgi.framework"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-ARCHITECTUREVIEWER -->
    <target name="bundle-architectureviewer">
        <jar compress="true" destfile="lib/bundle/architectureviewer1.1.jar"
            filesetmanifest="merge">

            <zipfileset src="${lib}/architectureviewer1.1.jar" prefix=""/>
            <manifest>
                <attribute name="Import-Package"
                    value="javax.swing,	javax.swing.text,
org.ungoverned.gravity.servicebinder, org.ungoverned.gravity.servicebinder.architecture,
javax.accessibility, javax.swing.plaf, javax.swing.tree, javax.swing.undo,
javax.swing.event, javax.swing.border"/>
            </manifest>
        </jar>
    </target>

    <!--BUNDLE-NETADDR -->
    <target name="bundle-netaddr" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/netaddr.jar"
            manifest="src/net/java/sip/communicator/impl/netaddr/netaddr.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/netaddr"
                prefix="net/java/sip/communicator/service/netaddr"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/netaddr"
                prefix="net/java/sip/communicator/impl/netaddr"/>
        </jar>
    </target>

    <!--BUNDLE-NETADDR-SLICK -->
    <target name="bundle-netaddr-slick" depends="rebuild">
        <jar compress="false" destfile="${bundles.dest}/netaddr-slick.jar"
            manifest="test/net/java/sip/communicator/slick/netaddr/netaddr.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/netaddr"
                prefix="net/java/sip/communicator/slick/netaddr"/>
        </jar>
    </target>

    <!--BUNDLE-SLICKLESS-->
    <target name="bundle-slickless" depends="rebuild">
        <!--internal-target- Runs all tests which do not belong to a service implementation and don't therefore need a running OSGI framework -->
        <jar compress="false" destfile="${bundles.dest}/slickless.jar"
            manifest="test/net/java/sip/communicator/slick/slickless/slickless.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/slickless"
                prefix="net/java/sip/communicator/slick/slickless"/>
        </jar>
    </target>

    <!--BUNDLE-SLICK-RUNNER-->
    <target name="bundle-slick-runner" depends="rebuild">
        <!--internal-target- Creates a bundle that runs all SLICKs that currently exist in sip-com -->
        <jar compress="false" destfile="${bundles.dest}/slick-runner.jar"
            manifest="test/net/java/sip/communicator/slick/runner/slick-runner.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/runner"
                prefix="net/java/sip/communicator/slick/runner"/>
        </jar>
    </target>

    <!--BUNDLE-SIP-->
    <target name="bundle-sip" depends="rebuild">
        <!--internal-target- Creates a bundle containing the sip implementation of the protocol provider package -->
        <jar compress="false" destfile="${bundles.dest}/protocol-sip.jar"
            manifest="src/net/java/sip/communicator/impl/protocol/sip/sip.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/protocol"
                prefix="net/java/sip/communicator/service/protocol"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/sip"
                prefix="net/java/sip/communicator/impl/protocol/sip"/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ -->
    <target name="bundle-icq" depends="rebuild"
        description="Creates a bundle containing the icq impl of the protocol provider.">
        <jar compress="false" destfile="${bundles.dest}/protocol-icq.jar"
            manifest="src/net/java/sip/communicator/impl/protocol/icq/icq.provider.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/service/protocol"
                prefix="net/java/sip/communicator/service/protocol"/>
            <zipfileset dir="${dest}/net/java/sip/communicator/impl/protocol/icq"
                prefix="net/java/sip/communicator/impl/protocol/icq"/>
            <zipfileset src="${lib}/joscar-0.9.4-cvs-bin.jar" prefix=""/>
            <zipfileset src="${lib}/oscar-aim.jar" prefix=""/>
            <zipfileset src="${lib}/retroweaver-rt.jar" prefix=""/>
        </jar>
    </target>

    <!-- BUNDLE-ICQ-SLICK -->
    <target name="bundle-icq-slick" depends="rebuild"
        description="Creates a bundle containing the the slick for the ICQ protocol provider.">
        <jar compress="false" destfile="${bundles.dest}/protocol-icq-slick.jar"
            manifest="test/net/java/sip/communicator/slick/protocol/icq/icq.provider.slick.manifest.mf">
            <zipfileset dir="${dest}/net/java/sip/communicator/slick/protocol/icq"
                prefix="net/java/sip/communicator/slick/protocol/icq"/>
            <zipfileset src="${lib}/joscar-0.9.4-cvs-bin.jar" prefix=""/>
            <zipfileset src="${lib}/oscar-aim.jar" prefix=""/>
            <zipfileset src="${lib}/retroweaver-rt.jar" prefix=""/>
        </jar>
    </target>

</project>

